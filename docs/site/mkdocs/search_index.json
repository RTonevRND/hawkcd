{
    "docs": [
        {
            "location": "/resources/", 
            "text": "Hello", 
            "title": "Resources"
        }, 
        {
            "location": "/resources/#hello", 
            "text": "", 
            "title": "Hello"
        }, 
        {
            "location": "/user-guide/", 
            "text": "", 
            "title": "User Guide"
        }, 
        {
            "location": "/contribute/contribution-agreement/", 
            "text": "", 
            "title": "Contribution Agreement"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/", 
            "text": "HawkCD - SRS\n\n\nRequirements Specification\n\n\n\n\nPrepared by:\n\n\n\n\nMargarita Ivancheva\n\n\nVladislav Nikolov\n\n\nSimeon Petrov\n\n\nMariyan Stefanov\n\n\nRadoslav Minchev\n\n\n\n\nVersion 1.0 approved\n\n\nApril 15, 2016\n\n\n\n\nTable of Contents\n\n\n\n\nIntroduction\n\n\nUse Cases\n\n\n\n\nManage Pipeline Group (#001)\n\n\nManage Pipeline (#002)\n\n\nManage Stage (#003)\n\n\nManage Job (#004)\n\n\nManage Task (#005)\n\n\nManage Material (#006)\n\n\nManage Agent (#007)\n\n\nManage Environment Variable (#008)\n\n\nManage Environment (#009)\n\n\nManage Authentication and Authorization (#010)\n\n\nUse Case #001 - Manage Pipeline Group\n\n\n\n\nFunctional requirements\n\n\n\n\nIntroduction\n\n\nPurpose\n\n\nThe current SRS document tries to define the MVP (Minimum Viable Product) scope for the Hawkengine System targeted to be released as version 1 and elaborate in details the product requirements.\n\n\nIntended Audience and Reading Suggestions\n\n\nThe intended audience of this document is all members directly or indirectly involved in the project: Developers, Quality Assurance Engineers, Product and Project Managers and Marketing staff. The document should be read from top to bottom to understand the overall concept the Hawkengine System implements. Each use case is self-contained. It details one or many features of the system related to a logical area of the Application, e.g. \u201cPipeline Management\u201d and \u201cAuthentication \n Authorization\u201d.\n\n\nProduct Perspective\n\n\nThe Hawkengine System intends to be a one stop solution for managing Continuous Delivery processes for the Enterprise. It will enable and encourage collaboration between delivery team members including but not limited to Developers, QA, Ops and Release Managers.\n\n\nUser Classes and Characteristics\n\n\n\n\n\n\nDeveloper\n\n\n\n\n\n\nQuality Assurance Engineer\n\n\n\n\n\n\nDevOps Engineer\n\n\n\n\n\n\nOperations Engineer\n\n\n\n\n\n\nRelease Manager\n\n\n\n\n\n\nOperating Environment\n\n\nThe System runs on all Operating Systems that support the JVM.\n\n\nThe main testing will be performed under the following Operating Systems:\n\n\n\n\n\n\nWindows Server 2012 and above\n\n\n\n\n\n\nUbuntu 14.04 LTS\n\n\n\n\n\n\n\n\n\n\nBrief Description\n\n\nThis use case allows an Administrator to create a new Pipeline Group. He/she can also modify or delete a certain Pipeline Group, depending on the intention.\n\n\nActors\n\n\nPrimary Actor - Administrator\n\n\nFlow of Events\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.\n\n\n\n\nCreate Pipeline Group\n\n\n\n\nThe system provides the operations available to the Administrator. These operations are: Create, Modify and Delete Pipeline Group. The Administrator chooses \u201cCreate Pipeline Group\u201d option.\n\n\n\n\nSubmit the Pipeline Group\n\n\n\n\nThe system provides an option for the Administrator to enter a name for the new Pipeline Group. The Administrator can modify the name as desired until choosing to submit the Pipeline Group. At this point the system validates the entered value and saves the Pipeline Group. The use case ends.\n\n\n\n\nAlternative Flows\n\n\n\n\nModify Pipeline Group\n\n\n\n\nAt basic flow step \nCreate Pipeline Group\n, the Administrator already has a Pipeline Group that has been created. The system retrieves and displays the Pipeline Group on focus and allows him/her to use it as a starting point. The use case resumes at basic flow step \nSubmit the Pipeline Group\n.\n\n\n\n\nDelete Pipeline Group\n\n\n\n\nAt basic flow step \nCreate Pipeline Group\n, the Administrator already has a Pipeline Group created and chooses to delete it. This option is available to the Administrator only when the Pipeline Group does not contain any Pipelines. The system deletes the Pipeline Group. The use case ends.\n\n\n\n\nUnauthorized User\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the User is authorized for such operations. There are three basic cases when the user is denied access:\n\n\n\n\nOperator\n\n\n\n\nIn cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Pipeline Groups. He/she has the same accessibility level as Viewer.\n\n\n\n\nViewer\n\n\n\n\nIn cases, when the user is with Viewer permission status, he/she is not able to create, modify or delete Pipeline Groups. He/she can only observe the specific Pipeline Group, if he/she is within one of the following groups:\n\n\n\n\nServer Viewer\n\n\n\n\nThe user has global view access.\n\n\n\n\nPipeline Group Viewer\n\n\n\n\nThe user can observe the specific Pipeline Group and its successors.\n\n\n\n\nUnauthenticated User\n\n\n\n\nIn cases, when the user\u2019s credentials are not valid, a proper error message displays and the use case ends.\n\n\nFor further explanation regarding authentication and authorization, please refer to \nAuthentication and Authorization Section\n.*\n\n\n\n\nQuit\n\n\n\n\nThe system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.\n\n\n\n\nManage Pipeline (#002)\n\n\n\n\nOverview\n\n\nA Pipeline consists of multiple Stages, each of which will be run in order. If a Stage fails, then the Pipeline is considered failed and the rest of the stages will not be started.\n\n\n*Pipeline status: *\n\n\n\n\n\n\nPassed\n\n\n\n\n\n\nFailed\n\n\n\n\n\n\nIn progress\n\n\n\n\n\n\nPaused\n\n\n\n\n\n\nBrief Description\n\n\nThis use case allows an Administrator to create a new Pipeline. He/she can also modify or delete a certain Pipeline, depending on the intention. Last, but not least, the Administrator is able to run the Pipeline with latest Materials or with specific Materials. After that he/she can pause or stop the Pipeline.\n\n\nActors\n\n\nPrimary Actor - Administrator\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.\n\n\n\n\n\n\nCreate Pipeline\n\n\n\n\n\n\nThe system provides the operations available to the Administrator. These operations are: Create, Modify or Delete Pipeline. The Administrator chooses \u201cCreate Pipeline\u201d option.\n\n\n\n\n\n\nFill the Pipeline Options\n\n\n\n\n\n\nThe system provides the Administrator with a set of fields to fill. The Administrator can add and modify the name of the Pipeline, as well as the Stage and Materials.\n\n\n\n\n\n\nSubmit the Pipeline\n\n\n\n\n\n\nThe Administrator indicates that the operation based on creating a new Pipeline is completed. The system validates all of the entered values and saves the Pipeline. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flows\n\n\n\n\nModify Pipeline\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nCreate Pipeline\n, the Administrator already has a Pipeline that has been created. The system retrieves and displays the Pipeline on focus. The Administrator has a set of options to choose from:\n\n\n\n\n\n\nGeneral Options\n\n\n\n\n\n\nThe Administrator can modify the general options of the selected pipeline.\n\n\n\n\n\n\nMaterial Options\n\n\n\n\n\n\nThe Administrator can add, modify or delete an existing Material.\n\n\n\n\n\n\nStage Options\n\n\n\n\n\n\nThe Administrator can add, modify or delete an existing Stage.\n\n\n\n\n\n\nEnvironment Variable Options\n\n\n\n\n\n\nThe Administrator can add, modify or delete an existing Environment Variable.\n\n\n\n\n\n\nLock Option\n\n\n\n\n\n\nThe Administrator has the option to lock a specific Pipeline. He/she might consider this \u043eption if he/she wants to make sure that a single instance of a pipeline can run at a time, especially when the Stages of the Pipeline are related to one another. The system registers the changes and initializes the process of locking the Pipeline. The use case resumes at \nSubmit the Pipeline\n basic flow.\n\n\nThe Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Pipeline and the use case ends. The use case resumes at basic flow step \nSubmit the Pipeline\n.\n\n\n\n\n\n\nDelete Pipeline\n\n\n\n\n\n\nAt basic flow step \nCreate Pipeline\n, the Administrator already has a Pipeline created and chooses to delete it. The system warns the user that he/she is about to delete a Pipeline. The Administrator confirms the deletion. The system deletes the Pipeline, as well as the Pipeline\u2019s runs. However, the Pipeline\u2019s artifacts are not removed, since there can be interrelation with other pipelines. The use case ends.\n\n\n\n\n\n\nRun Pipeline\n\n\n\n\n\n\nAt basic flow step \nCreate Pipeline\n, the Administrator already has a Pipeline and chooses to run it. The system provides a set of options for the Administrator to choose from for triggering the run of the pipeline:\n\n\n\n\n\n\nAutomatic Trigger\n\n\n\n\n\n\nBy default, the server is set to automatically trigger pipelines. Whenever a Material from this Pipeline is updated, the pipeline run is triggered.\n\n\n\n\n\n\nManual Trigger\n\n\n\n\n\n\nWhen the Pipeline is manually triggered, the server obligatorily checks for the latest Materials and schedules the Pipeline. The Administrator is able to:\n\n\n\n\n\n\nRun Pipeline\n\n\n\n\n\n\nThe Administrator sets the Pipeline to begin build activity.\n\n\n\n\n\n\nRun Pipeline-specific\n\n\n\n\n\n\nThe Administrator decides which specific Materials will be used to run the Pipeline, and triggers it.\n\n\nDuring each of the triggered processes the Administrator can:\n\n\n\n\n\n\nPause Pipeline\n\n\n\n\n\n\nThe Administrator pauses the scheduled Pipeline. At this point the system prevents any new pipeline activity, while letting the Pipeline proceed until it completes the job currently \u201crunning\u201d.\n\n\n\n\n\n\nStop Pipeline\n\n\n\n\n\n\nThe Administrator stops the scheduled Pipeline.\n\n\n\n\n\n\nUnauthorized User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the User is authorized for such operations. There are three basic occasions when the user is denied access:\n\n\n\n\n\n\nOperator\n\n\n\n\n\n\nIn cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Pipelines. He/she has the same accessibility level as Viewer and can perform alternative flow \nRun Pipeline\n.\n\n\n\n\n\n\nViewer\n\n\n\n\n\n\nIn cases, when the user is with Viewer permission status, he/she is not able to create, modify, delete or run Pipelines. He/she can only observe the specific Pipeline, if he/she is within one of the following groups:\n\n\n\n\n\n\nServer Viewer\n\n\n\n\n\n\nThe user has global view access.\n\n\n\n\n\n\nPipeline Group Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline Group and its successors.\n\n\n\n\n\n\nPipeline Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors.\n\n\n\n\n\n\nEnvironment Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nIn cases, when the user\u2019s credentials are not valid, a proper error message displays and the use case ends.\n\n\nFor further explanation regarding authentication and authorization, please refer to \nAuthentication and Authorization Section\n.\n\n\n\n\n\n\nQuit\n\n\n\n\n\n\nThe system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.\n\n\n\n\n\n\nInvalid Name\n\n\n\n\n\n\nAt basic flow step \nCreate Pipeline\n the system determines that the name of the Pipeline is not valid and displays an error message. The use case ends.\n\n\n\n\nManage Stage (#003)\n\n\nOverview\n\n\nA Stage consists of multiple jobs, each of which can run independently of the others. This means that Hawkengine can and does parallelize the runs of Jobs in a Stage. If a Job fails, then the Stage is considered failed. However, since Jobs are independent of each other, all other Jobs in the Stage will also be run.\n\n\nStage Status:\n\n\n\n\n\n\nPassed\n\n\n\n\n\n\nFailed\n\n\n\n\n\n\nIn progress\n\n\n\n\n\n\nPaused\n\n\n\n\n\n\nBrief Description\n\n\nThis use case allows an Administrator to create a new Stage. He/she can also modify or delete a certain Stage, depending on the intention. Last, but not least, the Administrator is able to run the Stage with all Jobs or specific Jobs.\n\n\nActors\n\n\nPrimary Actor - Administrator\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.\n\n\n\n\n\n\nChoose Pipeline\n\n\n\n\n\n\nThe Administrator chooses in which Pipeline to create a Stage.\n\n\n\n\n\n\nCreate Stage\n\n\n\n\n\n\nThe system provides the operations available to the Administrator to create a new Stage within the chosen Pipeline. These operations are: Create, Modify or Delete Stage. The Administrator chooses \u201cCreate Stage\u201d option.\n\n\n\n\n\n\nFill the Stage Options\n\n\n\n\n\n\nThe system provides the Administrator with a set of fields to fill. The Administrator can add and modify the name of the Stage, the type of the Task, as well as to add Job to the Stage.\n\n\n\n\n\n\nSubmit the Stage\n\n\n\n\n\n\nThe Administrator indicates that the operation based on creating a new Stage is completed. The system validates all of the entered values and saves the Stage. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flows\n\n\n\n\nModify a Stage\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nCreate Stage\n,\n the Administrator already has a Stage that has been created. The system retrieves and displays the Stage on focus. The Administrator has a set of options to choose from:\n\n\n\n\n\n\nJob Options\n\n\n\n\n\n\nThe Administrator can modify the Job name.\n\n\n\n\n\n\nTask Options\n\n\n\n\n\n\nThe Administrator can add, modify or delete an existing Task.\n\n\n\n\n\n\nEnvironment Variable Options\n\n\n\n\n\n\nThe Administrator can add, modify or delete an existing Environment Variable.\n\n\nThe Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Stage and the use case ends. The use case resumes at basic flow step \nSubmit the Stage\n.\n\n\n\n\n\n\nDelete a Stage.\n\n\n\n\n\n\nAt basic flow step \nCreate Stage\n, the Administrator already has a Stage and chooses to delete it. The system warns the user that he/she is about to delete a Stage. The Administrator confirms the deletion. The system deletes the Stage, without removing the stage runs information, since it might be used as reference to previous runs. The use case ends.\n\n\n\n\n\n\nRun\n \nStage.\n\n\n\n\n\n\nAt basic flow step \nCreate Stage\n, the Administrator already has a Stage and chooses to run it. The system provides a set of options for the Administrator to choose from for running the Stage:\n\n\n\n\n\n\nRun Stage\n\n\n\n\n\n\nThe Administrator sets the Stage to begin running an activity\n\n\n\n\n\n\nRun Stage-specific\n\n\n\n\n\n\nThe Administrator decides which specific Jobs will be used to run the Stage, and triggers it.\n\n\n\n\n\n\nUnauthorized User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the User is authorized for such kind of operations. There are three basic occasions when the user is denied access:\n\n\n\n\n\n\nOperator\n\n\n\n\n\n\nIn cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Stages. He/she has the same accessibility level as Viewer and can perform alternative flow \nRun Stage\n.\n\n\n\n\n\n\nViewer\n\n\n\n\n\n\nIn cases, when the user is with Viewer permission status, he/she is not able to create, modify, delete or run Stages. He/she can only observe the specific Stage, if he/she is within one of the following groups:\n\n\n\n\n\n\nServer Viewer\n\n\n\n\n\n\nThe user has global view access.\n\n\n\n\n\n\nPipeline Group Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline Group and its successors.\n\n\n\n\n\n\nPipeline Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors.\n\n\n\n\n\n\nEnvironment Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.\n\n\nFor further explanation regarding authentication and authorization, please refer to \nAuthentication and Authorization Section\n.\n\n\n\n\n\n\nQuit\n\n\n\n\n\n\nThe system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.\n\n\n\n\n\n\nInvalid Name\n\n\n\n\n\n\nAt basic flow step \nCreate Stage\n the system determines that the name of the Stage is not valid and displays an error message. The use case ends.\n\n\n\n\nManage Job (#004)\n\n\nOverview\n\n\nA job consists of multiple Tasks, each of which will be run in order. If a Task in a Job fails, then the Job is considered failed, and unless specified otherwise, the rest of the Tasks in the Job will not be run.\n\n\nJob Status:\n\n\n\n\n\n\nPassed\n\n\n\n\n\n\nFailed\n\n\n\n\n\n\nAwaiting - awaiting agent assignment\n\n\n\n\n\n\nScheduled - job assigned for execution\n\n\n\n\n\n\nRunning - executing\n\n\n\n\n\n\nBrief Description\n\n\nThis use case allows an Administrator to create a new Job. He/she can also modify or delete a certain Job, depending on the intention.\n\n\nActors\n\n\nPrimary Actor - Administrator\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.\n\n\n\n\n\n\nChoose Pipeline\n\n\n\n\n\n\nThe Administrator chooses in which Pipeline to operate.\n\n\n\n\n\n\nChoose Stage\n\n\n\n\n\n\nThe Administrator chooses in which Stage to create a Job.\n\n\n\n\n\n\nCreate Job\n\n\n\n\n\n\nThe system provides the operations available to the Administrator to create a new Job within the chosen Stage. These operations are: Create, Modify or Delete Job. The Administrator chooses \u201cCreate Job\u201d option.\n\n\n\n\n\n\nFill the Job Options\n\n\n\n\n\n\nThe system provides the Administrator with set of fields to fill. The Administrator can add and modify the name of the Job, as well as the type of the Task.\n\n\n\n\n\n\nSubmit the Job\n\n\n\n\n\n\nThe Administrator indicates that the operation based on creating a new Job is completed. The system validates all of the entered values and saves the Job. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flows\n\n\n\n\nModify Job\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nCreate Job\n,\n the Administrator already has a Job that has been created. The system retrieves and displays the Job on focus. The Administrator has a set of options to choose from:\n\n\n\n\n\n\nJob Options\n\n\n\n\n\n\nThe Administrator can modify the Job name.\n\n\n\n\n\n\nTask Options\n\n\n\n\n\n\nThe Administrator can add, modify or delete an existing Task.\n\n\n\n\n\n\nEnvironment Variable Options\n\n\n\n\n\n\nThe Administrator can add, modify or delete an existing Environment Variable.\n\n\nThe Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Job and the use case ends. The use case resumes at basic flow step \nSubmit the Job\n.\n\n\n\n\n\n\nDelete Job.\n\n\n\n\n\n\nAt basic flow step \nCreate Job\n, the Administrator already has a Job and chooses to delete it. The system warns the user that he/she is about to delete a Job. The Administrator confirms the deletion. The system deletes the Job. The use case ends.\n\n\n\n\n\n\nUnauthorized User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the User is authorized for such operations. There are three basic occasions when the user is denied access:\n\n\n\n\n\n\nOperator\n\n\n\n\n\n\nIn cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Jobs. He/she has the same accessibility level as Viewer.\n\n\n\n\n\n\nViewer\n\n\n\n\n\n\nIn cases, when the user is with Viewer permission status, he/she is not able to create, modify or delete Jobs. He/she can only observe the specific Job, if he/she is within one of the following groups:\n\n\n\n\n\n\nServer Viewer\n\n\n\n\n\n\nThe user has global view access.\n\n\n\n\n\n\nPipeline Group Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline Group and its successors.\n\n\n\n\n\n\nPipeline Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors.\n\n\n\n\n\n\nEnvironment Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.\n\n\nFor further explanation regarding authentication and authorization, please refer to \nAuthentication and Authorization Section\n.\n\n\n\n\n\n\nQuit\n\n\n\n\n\n\nThe system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.\n\n\n\n\n\n\nInvalid Name\n\n\n\n\n\n\nAt basic flow step Create Job the system determines that the name of the Job is not valid and displays an error message. The use case ends.\n\n\n\n\nManage Task (#005)\n\n\nOverview\n\n\nA task is an action that needs to be performed. Usually, it is a single command.\n\n\nBrief Description\n\n\nThis use case allows an Administrator to create a new Task. He/she can also modify or delete a certain Task, depending on the intention.\n\n\nActors\n\n\nPrimary Actor - Administrator\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.\n\n\n\n\n\n\nChoose Pipeline\n\n\n\n\n\n\nThe Administrator chooses in which Pipeline to operate.\n\n\n\n\n\n\nChoose Stage\n\n\n\n\n\n\nThe Administrator chooses in which Stage to operate.\n\n\n\n\n\n\nChoose Job\n\n\n\n\n\n\nThe Administrator chooses in which Job to create a new Task.\n\n\n\n\n\n\nCreate Task\n\n\n\n\n\n\nThe system provides the operations available to the Administrator to create a new Task within the chosen Job. These operations are: Create, Modify or Delete Task. The Administrator chooses \u201cCreate Task\u201d option.\n\n\n\n\n\n\nFill the Task Options\n\n\n\n\n\n\nThe system provides the Administrator with a set of fields to fill. The Administrator can modify the type of the Task. The system provides a list with different Task types. The Administrator chooses Exec Task. The system provides a set of fields that should be filled.\n\n\n\n\n\n\nSubmit the Task\n\n\n\n\n\n\nThe Administrator indicates that the operation based on creating a new Task is completed. The system validates all of the entered values and saves the Task. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flows\n\n\n\n\nModify a Task\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nCreate Task\n,\n the Administrator already has a Task that has been created. The system retrieves and displays the Task on focus. The Administrator has a set of options to choose from:\n\n\n\n\n\n\nTask Command\n\n\n\n\n\n\nThe Administrator can modify the Task command.\n\n\n\n\n\n\nArguments\n\n\n\n\n\n\nThe Administrator can modify the arguments.\n\n\n\n\n\n\nWorking Directory\n\n\n\n\n\n\nThe Administrator can modify the working directory.\n\n\n\n\n\n\nRun Condition\n\n\n\n\n\n\nThe Administrator can modify the condition under which the Task will run.\n\n\n\n\n\n\nIgnore Errors\n\n\n\n\n\n\nThe Administrator can check the option to ignore errors.\n\n\nThe Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Task and the use case ends. The use case resumes at basic flow step \nSubmit the Task\n.\n\n\n\n\n\n\nDelete a Task\n\n\n\n\n\n\nAt basic flow step \nCreate Task\n, the Administrator already has a Task and chooses to delete it. The system warns the user that he/she is about to delete a Task. The Administrator confirms the deletion. The system deletes the Task. The use case ends.\n\n\n\n\n\n\nTask Type\n\n\n\n\n\n\nAt basic flow step \nCreate Task\n, the Administrator has the option to choose the Task type. There are four different options:\n\n\n\n\n\n\nExec Task\n\n\n\n\n\n\nCreates an Execution Task with command, arguments, working directory, run condition and ignore errors options.\n\n\n\n\n\n\nFetch Artifact Task\n\n\n\n\n\n\nCreates a Fetch Artifact Task with specific Pipeline, Stage, Job, source, destination and run condition.\n\n\n\n\n\n\nFetch Material Task\n\n\n\n\n\n\nCreates a Fetch Material Task with specific Material and run condition.\n\n\n\n\n\n\nUpload Artifact Task\n\n\n\n\n\n\nCreates a Upload Artifact Task with specific source, destination and run condition.\n\n\n\n\n\n\nModify Task Change\n\n\n\n\n\n\nAt alternative flow step \nModify Task\n, the system provides different options depending on which Task type the Administrator has created. The options are based on alternative flow step \nTask Type\n.\n\n\n\n\n\n\nUnauthorized User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the User is authorized for such operations. There are three basic occasions when the user is denied access:\n\n\n\n\n\n\nOperator\n\n\n\n\n\n\nIn cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Tasks. He/she has the same accessibility level as Viewer\n.\n\n\n\n\n\n\nViewer\n\n\n\n\n\n\nIn cases, when the user is with Viewer permission status, he/she is not able to create, modify or delete Tasks. He/she can only observe the specific Task, if he/she is within one of the following groups:\n\n\n\n\n\n\nServer Viewer\n\n\n\n\n\n\nThe user has global view access.\n\n\n\n\n\n\nPipeline Group Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline Group and its successors.\n\n\n\n\n\n\nPipeline Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors.\n\n\n\n\n\n\nEnvironment Viewer\n\n\n\n\n\n\nThe user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.\n\n\nFor further explanation regarding authentication and authorization, please refer to \nAuthentication and Authorization Section\n.\n\n\n\n\n\n\nQuit\n\n\n\n\n\n\nThe system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.\n\n\n\n\n\n\nInvalid Name\n\n\n\n\n\n\nAt basic flow step \nCreate Task\n the system determines that the name of the Task is not valid and displays an error message. The use case ends.\n\n\n\n\nManage Material (#006)\n\n\nOverview\n\n\nA Material is a cause for a pipeline to run. Often, it is a source code material repository (Git, TFS, etc). The Hawkengine System continuously polls configured Materials and when a new change or commit is found, the corresponding Pipelines are run or \"triggered\".\n\n\nThere are different kinds of Materials. An example can be a Git Material. When a commit is made to the repository configured in the Git Material, the pipeline gets triggered.\n\n\nA Pipeline can even be configured with multiple Materials. When either repository has a new commit, the Pipeline is triggered.\n\n\nBrief Description\n\n\nThis use case allows an Administrator to create a new Material. He/she can also modify or delete a certain Material, depending on the intention.\n\n\nActors\n\n\nPrimary Actor - Administrator\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.\n\n\n\n\n\n\nChoose Pipeline\n\n\n\n\n\n\nThe Administrator chooses in which Pipeline to create a Material.\n\n\n\n\n\n\nCreate Material\n\n\n\n\n\n\nThe system provides the operations available to the Administrator to create a new Material within the chosen Pipeline. These operations are: Create, Modify or Delete Material. The Administrator chooses \u201cCreate Material\u201d option.\n\n\n\n\n\n\nFill the Material Options\n\n\n\n\n\n\nThe system provides the Administrator with a set of fields to fill. The Administrator can modify the type of the Material. The system provides two options. The Administrator chooses Git Material. The system provides a set of fields that should be filled. The Administrator enters name for the Material, Git url and credentials.\n\n\n\n\n\n\nSubmit the Material\n\n\n\n\n\n\nThe Administrator indicates that the operation based on creating a new Material is completed. The system validates all of the entered values and saves the Material. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flows\n\n\n\n\nCreate NuGet Material\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nCreate Material\n,\n the Administrator chooses NuGet Material. The system provides a set of fields that should be filled. The Administrator enters Material name, NuGet url, NuGet package and credentials. He/she is also able to choose whether the Material to include can be a pre-release. The use case resumes at basic flow step \nSubmit the Material\n.\n\n\n\n\n\n\nModify Material\n\n\n\n\n\n\nAt basic flow step \nCreate Material\n,\n the Administrator already has a Material that has been created. The system retrieves and displays the Material on focus. The Administrator has a set of options to modify:\n\n\n\n\n\n\nMaterial Name\n\n\n\n\n\n\nThe Administrator can modify the Material name.\n\n\n\n\n\n\nGit Url\n\n\n\n\n\n\nThe Administrator can modify the Git Url of the Material.\n\n\n\n\n\n\nGit Branch\n\n\n\n\n\n\nThe Administrator can modify the Git Branch of the Material.\n\n\n\n\n\n\nPoll for Changes\n\n\n\n\n\n\nThe Administrator can choose to poll for changes.\n\n\n\n\n\n\nCredentials\n\n\n\n\n\n\nThe Administrator should enter his/her Git credentials, if the Git repository is private.\n\n\n\n\n\n\nDelete a Material.\n\n\n\n\n\n\nAt basic flow step \nCreate Material\n,\n the Administrator already has a Material and chooses to delete it. The system warns the user that he/she is about to delete a Material. The Administrator confirms the deletion. The system deletes the Material. The use case ends.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nAt basic flow step \nLog On\n,\n the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.\n\n\n\n\n\n\nQuit\n\n\n\n\n\n\nThe system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.\n\n\n\n\n\n\nInvalid Name\n\n\n\n\n\n\nAt basic flow step \nCreate Material\n the system determines that the Material name is not valid and displays an error message. The use case ends.\n\n\n\n\n\n\nInvalid Url\n\n\n\n\n\n\nAt basic flow step \nCreate Material\n the system determines that the Material Url is not valid and displays an error message. The use case ends.\n\n\n\n\n\n\nInvalid Credentials\n\n\n\n\n\n\nAt basic flow step \nCreate Material\n the system determines that the Material credentials are not valid and displays an error message. The use case ends.\n\n\n\n\nManage Agent (#007)\n\n\nOverview\n\n\n\n\nHawkengine Agents are the workers that execute the Jobs/Tasks. All Tasks configured in the system run on Hawkengine Agents. The Hawkengine Server polls for changes in Materials and then, when a change is detected and a Pipeline needs to be triggered, the corresponding Jobs are assigned to the Agents, for them to execute the Tasks.\n\n\nAgents pick up Jobs which are assigned to them, execute the Tasks in the Job and report the status of the Job to the Hawkengine Server. Then, the Server collects all the information from the different Jobs and then decides on the status of the Stage.\n\n\nAgents and Jobs can be enhanced with \"Resources\". Resources are free-form tags, that help Hawkengine decides which Agents are capable of picking up specific Jobs. The resources can be thought of as the Agent broadcasting its capabilities. Resources are defined by administrators and can mean anything the administrators want them to mean.\n\n\n\n\nBrief Description\n\n\n\n\nThis use case allows an Administrator to modify or delete a certain Agent, depending on the intention.\n\n\n\n\nActors\n\n\n\n\nPrimary Actor - Administrator\n\n\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.\n\n\n\n\n\n\nChoose Agent\n\n\n\n\n\n\nThe Administrator chooses with which Agent to operate.\n\n\n\n\n\n\nChoose Agent Option\n\n\n\n\n\n\nThe system provides the operations available to the Administrator to elaborate. The operations are: Enable/Disable Agent, Edit Resources and Delete Agent. The Administrator chooses \u201cEnable/Disable Agent\u201d option.\n\n\n\n\n\n\nEnable Agent\n\n\n\n\n\n\nWhen an Agent first connects to the Server it is \u201cDisabled\u201d. The Administrator chooses to enable Agent in order to schedule work on it.\n\n\n\n\n\n\nSubmit the Agent\n\n\n\n\n\n\nThe Administrator indicates that the operation regarding the state of the Agent is completed. The system saves the changes. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flow\n\n\n\n\nAdd Resources\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nChoose Agent Option\n, the Administrator chooses to Edit Resources. The system provides a set of options. The Administrator chooses to Add new Resource. He/she enters the Resource name and submits the result.\n\n\n\n\n\n\nDelete Resources\n\n\n\n\n\n\nAt basic flow step \nChoose Agent Option\n, the Administrator chooses to Edit Resources. The system provides a set of options. The Administrator chooses to Delete Resource. The system warns the user that he/she is about to delete a Resource. The Administrator confirms the deletion. The system deletes the Resource. The use case ends.\n\n\n\n\n\n\nDelete Agent\n\n\n\n\n\n\nAt basic flow step \nChoose Agent Option\n, the Administrator chooses to Delete Agent. The system warns the user that he/she is about to delete an Agent. The Administrator confirms the deletion. The system deletes the Agent. The use case ends.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.\n\n\n\n\nManage Environment Variable (#008)\n\n\nOverview\n\n\n\n\nIn Hawkengine Server, Environment Variables are user-defined variables that are defined in the configuration. These environment variables are made available to tasks just like other environment variables available to processes when they run in an operation system.\n\n\nEnvironment Variables can be defined at multiple levels: Within Environments, within Pipelines, within Stages and within Jobs. They follow a cascading system where Environment Variables defined at the Environment level get overridden by Environment Variables defined at the Pipeline level and so on.\n\n\n\n\nBrief Description\n\n\n\n\nThis use case allows an Administrator to create a new Environment Variable. He/she can also modify or delete a certain Environment Variable, depending on the intention.\n\n\n\n\nActors\n\n\n\n\nPrimary Actor - Administrator\n\n\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.\n\n\n\n\n\n\nChoose Pipeline\n\n\n\n\n\n\nThe Administrator chooses in which Pipeline to create an Environment Variable.\n\n\n\n\n\n\nCreate Environment Variable\n\n\n\n\n\n\nThe system provides the operations available to the Administrator to create a new Environment Variable within the chosen Pipeline. These operations are: Create, Modify or Delete an Environment Variable. The Administrator chooses \u201cCreate Environment Variable\u201d option.\n\n\n\n\n\n\nFill the Environment Variable Options\n\n\n\n\n\n\nThe system provides the Administrator with a set of fields to fill. The Administrator can add or modify the name of the Environment Variable, the value of the Environment Variable, as well as to choose whether the Environment Variable will be secured.\n\n\n\n\n\n\nSubmit the Environment Variable\n\n\n\n\n\n\nThe Administrator indicates that the operation based on creating a new Environment Variable is completed. The system validates all of the entered values and saves the Environment Variable. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flow\n\n\n\n\nModify Environment Variable\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nCreate Environment Variable\n,\n the Administrator already has an Environment Variable that has been created. The system retrieves and displays the Environment Variable on focus. The Administrator has set of options to choose from:\n\n\n\n\n\n\nEnvironment Variable Name\n\n\n\n\n\n\nThe Administrator can modify the Environment Variable name.\n\n\n\n\n\n\nEnvironment Variable Value\n\n\n\n\n\n\nThe Administrator can modify the Environment Variable value.\n\n\n\n\n\n\nEnvironment Variable Security\n\n\n\n\n\n\nThe Administrator can modify the Environment Variable security.\n\n\nThe Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Environment Variable and the use case ends. The use case resumes at basic flow step \nSubmit the Environment Variable\n.\n\n\n\n\n\n\nDelete Environment Variable\n\n\n\n\n\n\nAt basic flow step \nCreate Environment Variable\n, the Administrator already has an Environment Variable created and chooses to delete it. The system warns the user that he/she is about to delete an Environment Variable. The Administrator confirms the deletion. The system deletes the Environment Variable. The use case ends.\n\n\n\n\n\n\nAdd Stage Environment Variable\n\n\n\n\n\n\nAt basic flow step \nCreate Environment Variable\n, the Administrator is able to choose in which Stage to add the Environment Variable. Once, he/she chooses the desired Stage, the use case resumes at \nFill the Environment Variable Options\n basic flow step.\n\n\n\n\n\n\nAdd Job Environment Variable\n\n\n\n\n\n\nAt basic flow step \nCreate Environment Variable\n, the Administrator is able to choose in which Job to add the Environment Variable. Once, he/she chooses the desired Job, the use case resumes at \nFill the Environment Variable Options\n basic flow step.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.\n\n\n\n\n\n\nQuit.\n\n\n\n\n\n\nThe system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.\n\n\n\n\nManage Environment (#009)\n\n\nOverview\n\n\n\n\nAn Environment is a group of Agents that allows to distribute Jobs. It is a logical boundary for Job execution. Common examples of environments are \nTest\n, \nAcceptance\n, \nStaging\n or \nProduction\n. An Environment can be assigned to multiple Agents and Pipelines. One Pipeline can belong to more than one Environment, however, one Agent can only belong to one Environment*. *\n\n\nAccess to an Environment should be controlled by the system RBAC model. There should be a way to limit access to Environments for specific users and groups.\n\n\n\n\nBrief Description\n\n\n\n\nThis use case allows an Administrator to create, modify or delete Environments\n\n\n\n\nActors\n\n\n\n\nPrimary Actor - Administrator\n\n\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.\n\n\n\n\n\n\nCreate Environment\n\n\n\n\n\n\nThe system provides the operations available to the Administrator to manage Environments. These operations are: Create, Modify or Delete Environment. The Administrator chooses \u201cCreate Environment\u201d option.\n\n\n\n\n\n\nFill the Environment Options\n\n\n\n\n\n\nThe system provides the Administrator with a set of fields to fill. The Administrator can modify:\n\n\n\n\n\n\nEnvironment Name\n\n\n\n\n\n\nThe Administrator should provide a name for the Environment.\n\n\n\n\n\n\nEnvironment Variables\n\n\n\n\n\n\nThe Administrator may add one or more Environment Variables that need to be passed.\n\n\n\n\n\n\nPipelines\n\n\n\n\n\n\nThe Administrator may add one or more Pipelines that need to run on the Environment.\n\n\n\n\n\n\nAgents\n\n\n\n\n\n\nThe Administrator may add one or more Agents associated with the Environment.\n\n\n\n\n\n\nSubmit the Environment\n\n\n\n\n\n\nThe Administrator indicates that the operation based on creating a new Environment is completed. The system validates all of the entered values and saves the Environment. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flow\n\n\n\n\nModify Environment\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nCreate Environment\n,\n the Administrator already has an Environment that has been created. The system retrieves and displays the Environment on focus. The Administrator has a set of options to modify:\n\n\n\n\n\n\nEnvironment Name\n\n\n\n\n\n\nThe Administrator can modify the Environment name.\n\n\n\n\n\n\nEnvironment Variables\n\n\n\n\n\n\nThe Administrator can add or remove Environment Variables.\n\n\n\n\n\n\nPipelines\n\n\n\n\n\n\nThe Administrator can add Pipelines that need to run on the particular Environment, or remove the ones that are no longer needed.\n\n\n\n\n\n\nAgents\n\n\n\n\n\n\nThe Administrator can add unassigned Agents to the Environment, or remove some, making them free for further association.\n\n\nThe Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Environment. The use case resumes at basic flow step \nSubmit the Environment\n.\n\n\n\n\n\n\nDelete Environment\n\n\n\n\n\n\nAt basic flow step \nCreate Environment\n, the Administrator already has an Environment created and chooses to delete it. The system warns the user that he/she is about to delete an Environment. The Administrator confirms the deletion. The system deletes the Environment. The use case ends.\n\n\n\n\n\n\nUnauthenticated User\n\n\n\n\n\n\nAt basic flow step \nLog On\n, the system establishes whether credentials of the Administrator are valid. In case, he/she is not, a proper error message displays and the use case ends.\n\n\n\n\nManage Authentication and Authorization (#010)\n\n\nOverview\n\n\n\n\nThe server has the notion for \nscope\n and \npermission types\n. A scope represents a certain level from the server where specific rights can be applied. On the other hand, \npermission types\n define the rights - what a user can do from a specific scope. Combining both concepts (scope \n permission types) provides a flexible authorization model.\n\n\n*Permission Scopes *\n\n\n\n\n\n\n\n\nServer - global server scope\n\n\n\n\n\n\nPipeline group - pipeline group level\n\n\n\n\n\n\nPipeline - pipeline level scope\n\n\n\n\n\n\nEnvironment - environment scope\n\n\n\n\n\n\n\n\nPermission Types\n\n\n\n\n\n\n\n\nViewer - a user can only view a given resource and its child resources\n\n\n\n\n\n\nOperator - a user can view and operate (run, re-run, pause, stop, etc.) a given resource (e.g. Pipeline \n Stage) and its child resources\n\n\n\n\n\n\nAdmin\n\n\n\n\n\n\nGroups\n\n\n\n\nA group is a set of claims (scope + permissions) that are grouped together. A group would ease the authorization management across groups of people. E.g. if we have 3 teams dev, qa \n ops, rather than assigning permissions individually to each team member, we would create a group and add scope and permissions to it, then add the members to the group, so that they inherit all of the group\u2019s permissions.\n\n\n\n\nPermission Inheritance\n\n\n\n\nIf a user is assigned a \npipeline group\n scope and an \nadmin\n permission type that would mean that all resources that are children of the current pipeline group (scope) e.g. one or more pipelines, will obey the permission assigned to their parent - pipeline group.\n\n\n\n\nOverriding Permissions\n\n\n\n\nThis is the case when we want to give a user permissions at a given scope e.g. \"pipeline group\", however we need to either restrict or broaden the rights to one or more child resources, e.g. Pipelines.\n\n\nGiven is a Pipeline group named \"Dev pipelines\" and we want to have one of our teams to have view rights for the group. Combining the \nPipeline Group\n scope and the \nview\n permission type would allow anyone of the team to see all pipelines. However, if we want the Development Lead of the team to be able to administer one or more pipelines from the group, but not all of them, we would assign in addition to its view rights inherited from the pipeline group scope, a \npipeline\n scope with \nadmin\n permission for a concrete pipelines that he needs administration rights for. In fact we'll override the inherited rights he received as part of the \nPipeline group\n scope.\n\n\n\n\nBrief Description\n\n\n\n\nThis use case allows an Administrator to modify team permissions, as well as individual permissions.\n\n\n\n\nActors\n\n\n\n\nPrimary Actor - Server Administrator\n\n\n\n\nFlow of Events\n\n\n\n\n\n\nBasic Flow\n\n\n\n\nLog On\n\n\n\n\n\n\n\n\n\n\nThis use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.\n\n\n\n\n\n\nChoose team of people\n\n\n\n\n\n\nThe Administrator chooses which team to assign to the desired project.\n\n\n\n\n\n\nSet permission for the team\n\n\n\n\n\n\nThe system provides a set of options for the Administrator to choose from:\n\n\n\n\n\n\nServer Admin\n\n\n\n\n\n\nThe Administrator gives global Admin rights to the team. The team members will be able to fully operate on a global level.\n\n\n\n\n\n\nPipeline Group Admin\n\n\n\n\n\n\nThe Administrator gives Pipeline Group Admin level rights to the team. The team members will be able to fully operate on a Pipeline Group level.\n\n\n\n\n\n\nPipeline Admin\n\n\n\n\n\n\nThe Administrator gives Pipeline Admin level rights to the team. The team members will be able to fully operate on a Pipeline level.\n\n\n\n\n\n\nEnvironment Admin\n\n\n\n\n\n\nThe Administrator gives Environment Admin level rights to the team. The team members will be able to fully operate on an Environment level.\n\n\n\n\n\n\nServer Operator\n\n\n\n\n\n\nThe Administrator gives Server Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on a Server level.\n\n\n\n\n\n\nPipeline Group Operator\n\n\n\n\n\n\nThe Administrator gives Pipeline Group Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on a Pipeline Group level.\n\n\n\n\n\n\nPipeline Operator\n\n\n\n\n\n\nThe Administrator gives Pipeline Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on a Pipeline level.\n\n\n\n\n\n\nEnvironment Operator\n\n\n\n\n\n\nThe Administrator gives Environment Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on an Environment level.\n\n\n\n\n\n\nServer Viewer\n\n\n\n\n\n\nThe Administrator gives Server Viewer level rights to the team. The team members will be able to observe on a Server level.\n\n\n\n\n\n\nPipeline Group Viewer\n\n\n\n\n\n\nThe Administrator gives Pipeline Group Viewer level rights to the team. The team members will be able to observe on a Pipeline Group level.\n\n\n\n\n\n\nPipeline Viewer\n\n\n\n\n\n\nThe Administrator gives Pipeline Viewer level rights to the team. The team members will be able to observe on a Pipeline level.\n\n\n\n\n\n\nEnvironment Viewer\n\n\n\n\n\n\nThe Administrator gives Environment Viewer level rights to the team. The team members will be able to observe on an Environment level.\n\n\nThe Administrator chooses the Pipeline Group Viewer as an option for team permissions.\n\n\n\n\n\n\nSubmit Permission Changes\n\n\n\n\n\n\nThe Administrator indicates that the operation based on the team permissions is completed. The system validates all of the information provided. The use case ends.\n\n\n\n\n\n\n\n\nAlternative Flow\n\n\n\n\nOverride individual permissions for person.\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nSet permission for the team\n, the system provides options for individual permissions. The Administrator can:\n\n\n\n\n\n\n\n\nRestrict team member rights\n\n\n\n\nChoose team member\n\n\n\n\n\n\n\n\n\n\nThe Administrator chooses the team member whose permissions he/she will restrict.\n\n\n\n\n\n\nSet individual permissions\n\n\n\n\n\n\nThe Administrator chooses to set Pipeline Viewer level rights to the team member, not the Pipeline Group Viewer level rights as was previously initialized. The team member will no longer be able to observe the Pipeline Group operations, but only the ones associated with the chosen Pipeline.\n\n\n\n\n\n\n\n\nBroaden team member rights\n\n\n\n\nChoose team member\n\n\n\n\n\n\n\n\n\n\nThe Administrator chooses the team member whose permissions he/she will broaden.\n\n\n\n\n\n\nSet individual permissions\n\n\n\n\n\n\nThe Administrator chooses to set Pipeline Group Operator level rights to the team member, not the Pipeline Group Viewer level rights as was previously initialized. The team member will be able to operate within the Pipeline Group, not only to observe.\n\n\nThe Administrator can modify the permissions as desired until choosing to submit the changes. At this point the system saves the updated permissions for the team member. The use case resumes at basic flow step \nSubmit Permission Changes.\n\n\n\n\n\n\n\n\nUpdate team permission to\n\n\n\n\nPipeline Group Admin\n\n\n\n\n\n\n\n\n\n\nAt basic flow step \nSet permission for the team\n,\n the Administrator chooses to set the team permissions to Pipeline Group Admin. In this way, the team members will be eligible to fully operate within the Pipeline Group.\n\n\n\n\n\n\nPipeline Group Operator\n\n\n\n\n\n\nAt basic flow step \nSet permission for the team\n,\n the Administrator chooses to set the team permissions to Pipeline Group Operator. In this way, the team members will be eligible to operate (run, re-run, pause, stop, etc.) within the Pipeline Group.\n\n\n\n\nFunctional Requirements\n\n\n\n\nThis section includes the requirements that specify all the fundamental actions of the software system.\n\n\n\n\n\n\n\n\nUse Case #001 - Manage Pipeline Group\n\n    ----------------------------------------\n\n\n\n\n\n\nAdd Pipeline Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Pipeline Group\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Pipeline Group to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add a new Pipeline Group.                                                                                                                            |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                         \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Pipeline Group to the database.\n\n                     4.  The system returns the newly created Pipeline Group.                                                                                                                        |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                             \n\n\n                     2.  At Basic Flow step 3, the system checks whether a Pipeline Group with the same name already exists. If this is the case, an error with an appropriate message is returned.  |\n\n\n\n| \nPostcondition\n     | The Pipeline Group has been added to the database.                                                                                                                             |\n| \nException Paths\n   | The User may abandon the operation at any time, without saving the information.                                                                                                |\n\n\n\n\nUpdate Pipeline Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Pipeline Group\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update a Pipeline Group in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update Pipeline Group.                                                                                                 |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                           \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system updates the Pipeline Group in the database.\n\n                     4.  The system returns the updated the Pipeline Group.                                                                                            |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                               \n\n\n                     2.  At Basic Flow step 3, the system checks whether the Pipeline Group exists. If it does not, an error with an appropriate message is returned.  |\n\n\n\n| \nPostcondition\n     | The Pipeline Group has been updated in the database.                                                                                             |\n| \nException Paths\n   | The User may abandon the operation at any time, without saving the information.                                                                  |\n\n\nDelete Pipeline Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Pipeline Group\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete a Pipeline Group from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Pipeline Group.                                                                                                                                   |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                                                       \n\n\n                     2.  The system deletes the Pipeline Group from the database.\n\n                     3.  The system notifies the User that the Pipeline Group has been deleted.                                                                                                              |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Pipeline Group exists or contains any Pipelines. Either way, if it does not, an error with an appropriate message is returned. |\n| \nPostcondition\n     | The Pipeline Group has been deleted from the database.                                                                                                                                 |\n| \nException Paths\n   | The User may abandon the operation at any time, without saving the information.                                                                                                        |\n\n\n\n\n\n\nUse Case #002 - Manage Pipeline\n\n    ----------------------------------\n\n\n\n\n\n\nAdd Pipeline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Pipeline\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Pipeline to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add new Pipeline.                                                                                                                                                                          |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                                                               \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Pipeline to the database.\n\n                     4.  The system returns the newly created Pipeline.                                                                                                                                                                    |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                                   \n\n\n                     2.  At Basic Flow step 3, the system checks whether a Pipeline with the same name within the same Pipeline Group already exists. If it does, an error message \u201cPipeline {pipelineName} already exists.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Pipeline has been added to the database.                                                                                                                                                                         |\n\n\n\n\nUpdate Pipeline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Pipeline\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update a Pipeline in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update the Pipeline.                                                                                                                   |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                           \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Pipeline to the database.\n\n                     4.  The system returns the updated Pipeline.                                                                                                                      |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                               \n\n\n                     2.  At Basic Flow step 3, the system checks whether the Pipeline exists. If it does not, an error message \u201cPipeline {pipelineName} does not exist.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Pipeline has been updated in the database.                                                                                                                   |\n\n\n\n\nDelete Pipeline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Pipeline\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete a Pipeline from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Pipeline.                                                                                                                   |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                                 \n\n\n                     2.  The system deletes the Pipeline from the database.\n\n                     3.  The system notifies the User that the Pipeline has been deleted.                                                                                              |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Pipeline exists. If it does not, an error message \u201cPipeline {pipelineName} does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Pipeline has been deleted from the database.                                                                                                                 |\n| \nException Paths\n   | The User may abandon the operation at any time, without saving the information.                                                                                  |\n\n\n\n\nRun Pipeline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Pipeline\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to run a Pipeline.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to run a Pipeline with a single Job or it was triggered automatically.\n\n                     3.  An eligible Agent within the current Environment.                                                                                                             |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                                 \n\n\n                     2.  The system updates all Materials within the Pipeline.\n\n                     3.  The system sets the status of the Pipeline to \u201c*in progress*\u201d.\n\n                     4.  The system sets the status of the Job to \u201c*awaiting*\u201d.\n\n                     5.  The system assigns the Job to the Agent.\n\n                     6.  The system sets the status of the Job to \u201c*scheduled*\u201d.\n\n                     7.  The Agent processes the assigned Job, meanwhile the system sets the status of the processing Job to \u201c*running*\u201d.\n\n                     8.  The Agent sets the status of the processed Job to \u201c*passed*\u201d, if all its Tasks\u2019 statuses are \u201c*passed*\u201d as well.\n\n                     9.  The system sets the status of the Pipeline to \u201c*passed*\u201d.                                                                                                     |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, the system checks whether the Pipeline exists. If it does not, an error message \u201cPipeline {pipelineName} does not exist.\u201d is returned.\n\n\n                     2.  If Basic Flow step 2 fails, an error message \u201cMaterial {materialName} could not be updated. {errorReason}\u201d is returned.\n\n                     3.  At Basic Flow step 3, if the Pipeline is locked and there is a Pipeline scheduled beforehand, it will not be scheduled.\n\n                     4.  Basic Flow step 5 can fail under the following circumstances:\n\n                         1.  There is no Agent in the current Environment.\n\n                         2.  There is no eligible Agent in the current Environment:\n\n                             1.  The Agent is disabled.\n\n                             2.  The Agent is disconnected.\n\n                             3.  The Agent does not meet the required resources to process the Job.\n\n                     \n If this step fails, the Job status will remain \u201c*awaiting*\u201d.\n\n                     1.  At Basic Flow step 8, if any Task\u2019s status is \u201c*failed*\u201d and the option \u201cIgnore Errors\u201d is not selected, the Agent sets the Job\u2019s status to \u201c*failed*\u201d.\n\n                     2.  At Basic Flow step 9, if the Job\u2019s status is \u201c*failed*\u201d, the system sets the Pipeline\u2019s status to \u201c*failed*\u201d.                                                 |\n\n\n\n| \nPostcondition\n     | The Pipeline has been scheduled.                                                                                                                                 |\n\n\n\n\n\n\nUse Case #003 - Manage Stage\n\n    -------------------------------\n\n\n\n\n\n\nAdd Stage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Stage\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Stage to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add a new Stage.                                                                                                                                                            |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                                                \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Stage to the database.\n\n                     4.  The system returns the newly created Stage.                                                                                                                                                        |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                    \n\n\n                     2.  At Basic Flow step 3, the system checks whether a Stage with the same name within the same Pipeline already exists. If it does, an error message \u201cStage {stageName} already exists.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Stage has been added to the database.                                                                                                                                                             |\n\n\n\n\nUpdate Stage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Stage\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update a Stage in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update the Stage.                                                                                                                                                               |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                                                    \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Stage to the database.\n\n                     4.  The system returns the updated Stage.                                                                                                                                                                  |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error with an \u201cInvalid data\u201d message is returned.                                                                                            \n\n\n                     2.  At Basic Flow step 3, the system checks whether a Stage with the same name within the same Pipeline already exists. If it does not, an error message \u201cStage {stageName} does not exist.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Stage has been updated in the database.                                                                                                                                                               |\n\n\n\n\nDelete Stage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Stage\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete a Stage from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Stage.                                                                                                             |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                        \n\n\n                     2.  The system deletes the Stage from the database.\n\n                     3.  The system notifies the User that the Stage has been deleted.                                                                                        |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Stage exists. If it does not, an error message \u201cStage {stageName} does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Stage has been deleted from the database.                                                                                                           |\n\n\n\n\nRun Stage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Stage\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to run a Stage.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to run the Stage or it was triggered automatically.                                                                                                |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                                          \n\n\n                     2.  The system schedules a new Pipeline, starting from the current Stage.                                                                                                  |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, the system checks whether the Pipeline exists. If it does not, an error with an appropriate message is returned.                                \n\n\n                     2.  At Basic Flow step 2, the system checks whether the Stage exists. If it does not, an error with an appropriate message is returned.\n\n                     3.  At Basic Flow step 2, the system schedules a new Pipeline. However, if the Pipeline is locked and there is a Pipeline scheduled beforehand, it will not be scheduled.  |\n\n\n\n| \nPostcondition\n     | The Pipeline has been scheduled starting from the current Stage.                                                                                                          |\n| \nException Paths\n   | None.                                                                                                                                                                     |\n\n\n\n\n\n\nUse Case #004 - Manage Job\n\n    -----------------------------\n\n\n\n\n\n\nAdd Job\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Job\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Job to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add a new Job.                                                                                                                                                     |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                                       \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Job to the database.\n\n                     4.  The system returns the newly created Job.                                                                                                                                                 |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                           \n\n\n                     2.  At Basic Flow step 3, the system checks whether a Job with the same name within the same Stage already exists. If it does, an error message \u201cJob {jobName} already exists.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Job has been added to the database.                                                                                                                                                      |\n\n\n\n\nUpdate Job\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Job\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update a Job in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update the Stage.                                                                                                       |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                            \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Job to the database.\n\n                     4.  The system returns the updated Job.                                                                                                            |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                            \n\n\n                     2.  At Basic Flow step 3, the system checks whether the Job exists. If it does not, an error message \u201cJob {jobName} does not exist.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Job has been updated in the database.                                                                                                         |\n\n\n\n\nDelete Job\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Job\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete a Job from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Job.                                                                                                         |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                  \n\n\n                     2.  The system deletes the Job from the database.\n\n                     3.  The system notifies the User that the Job has been deleted.                                                                                    |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Job exists. If it does not, an error message \u201cJob {jobName} does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Job has been deleted from the database.                                                                                                       |\n\n\n\n\n\n\nUse Case #005 - Manage Task\n\n    ------------------------------\n\n\n\n\n\n\nAdd Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Task\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Task to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add a new Task.                                                              |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                 \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Task to the database.\n\n                     4.  The system returns the newly created Task.                                                          |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned. |\n| \nPostcondition\n     | The Task has been added to the database.                                                               |\n\n\n\n\nUpdate Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Task\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update a Task in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update the Task.                                                                                                        |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                            \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Task to the database.\n\n                     4.  The system returns the updated Task.                                                                                                           |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                            \n\n\n                     2.  At Basic Flow step 3, the system checks whether the Task already exists. If it does not, an error message \u201cTask does not exist.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Task has been updated in the database.                                                                                                        |\n\n\n\n\nDelete Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Task\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete a Task from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Task.                                                                                                |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                          \n\n\n                     2.  The system deletes the Task from the database.\n\n                     3.  The system notifies the User that the Task has been deleted.                                                                           |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Task exists. If it does not, an error message \u201cTask does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Task has been deleted from the database.                                                                                              |\n\n\n\n\n\n\nUse Case #006 - Manage Materials\n\n    -----------------------------------\n\n\n\n\n\n\nAdd Material\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Material\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add Material.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add new Material.                                                                                                                                                               |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                                                    \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Material to the database.\n\n                     4.  The system returns the newly created Material.                                                                                                                                                         |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                        \n\n\n                     2.  At Basic Flow step 3, the system checks whether a Material with the same name within the database already exists. If it does, an error message \u201cMaterial {materialName} already exists.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Material has been added to the database.                                                                                                                                                              |\n\n\n\n\nUpdate Material\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Material\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update the Material in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update a Material.                                                                       |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                             \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Material to the database.\n\n                     4.  The system returns the updated Material.                                                                        |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message. |\n| \nPostcondition\n     | The Material has been updated.                                                                                     |\n\n\n\n\nDelete Material\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Material\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete a Material\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete a Material.                                                                                                                    |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                                \n\n\n                     2.  The system deletes the Material from the database.\n\n                     3.  The system notifies the User that a Material has been deleted.                                                                                               |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Material exists. If it does not, an error message \u201cMaterial{materialName} does not exist.\u201d is returned. |\n| \nPostcondition\n     | Material has been deleted from the database.                                                                                                                    |\n\n\n\n\n\n\n\n\nUse Case #007 -\n \nManage\n \nAgents\n\n    ---------------------------------------------------------\n\n\n\n\n\n\nEnable Agent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Agent\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to enable an Agent in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to enable the Agent.                                                                                                                     |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                          \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system sets the Agent to \u201cEnabled\u201d.\n\n                     4.  The system saves the Agent to the database.\n\n                     5.  The system returns the Agent.                                                                                                                                |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                          \n\n\n                     2.  At Basic Flow step 3, the system checks whether the Agent already exists. If it does not, an error message \u201cAgent {agentName} does not exist.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Agent has been enabled in the database.                                                                                                                     |\n\n\n\n\nDelete Agent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Agent\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete an Agent from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Agent.                                                                                                             |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                        \n\n\n                     2.  The system deletes the Agent from the database.\n\n                     3.  The system notifies the User that the Agent has been deleted.                                                                                        |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Agent exists. If it does not, an error message \u201cAgent {agentName} does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Agent has been deleted from the database.                                                                                                           |\n\n\nAdd Resource\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Agent\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Resource to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add a new Resource.                                                                                                                                                               |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                                                      \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Resource to the database.\n\n                     4.  The system returns the newly created Resource.                                                                                                                                                           |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                          \n\n\n                     2.  At Basic Flow step 3, the system checks whether a Resource with the same name within the same Agent already exists. If it does, an error message \u201cResource {resourceName} already exists.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Resource has been added to the database.                                                                                                                                                                |\n\n\n\n\nDelete Resource\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Agent\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete a Resource from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has selected a Resource within the Agent.\n\n                     3.  The User has chosen to delete a Resource.                                                                                                                     |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                                 \n\n\n                     2.  The system deletes the Resource from the database.\n\n                     3.  The system notifies the User that the Resource has been deleted.                                                                                              |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Resource exists. If it does not, an error message \u201cResource {resourceName} does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Resource has been deleted from the database.                                                                                                                 |\n\n\n\n\n\n\nUse Case #008 - Manage Environment Variable\n\n    ----------------------------------------------\n\n\n\n\nAdd Environment Variable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Environment Variable\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Environment Variable to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add a new Environment Variable.                                              |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                 \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment Variable to the database.\n\n                     4.  The system returns the newly created Environment Variable.                                          |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned. |\n| \nPostcondition\n     | The Environment Variable has been added to the database.                                               |\n\n\n\n\nUpdate Environment Variable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Environment Variable\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update an Environment Variable in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update the Environment Variable.                                                                                                                        |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                            \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment Variable to the database.\n\n                     4.  The system returns the updated Environment Variable.                                                                                                                           |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                                            \n\n\n                     2.  At Basic Flow step 3, the system checks whether the Environment Variable already exists. If it does not, an error message \u201cEnvironment Variable does not exist.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Environment Variable has been updated in the database.                                                                                                                        |\n\n\n\n\nDelete Environment Variable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Environment Variable\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete an Environment Variable from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Environment Variable.                                                                                                                |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                                          \n\n\n                     2.  The system deletes the Environment Variable from the database.\n\n                     3.  The system notifies the User that the Environment Variable has been deleted.                                                                                           |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Environment Variable exists. If it does not, an error message \u201cEnvironment Variable does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Environment Variable has been deleted from the database.                                                                                                              |\n\n\n\n\n\n\nUse Case #009 - Manage Environment\n\n    -------------------------------------\n\n\n\n\n\n\nAdd Environment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Environment\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to add a new Environment to the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to add a new Environment.                                                       |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                 \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment to the database.\n\n                     4.  The system returns the newly created Environment.                                                   |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned. |\n| \nPostcondition\n     | The Environment has been added to the database.                                                        |\n\n\n\n\nUpdate Environment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Environment\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to update an Environment in the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to update the Environment.                                                                                                                        |\n\n\n\n| \nBasic Flow\n        | 1.  The system validates the data entered by the User.                                                                                                                   \n\n\n                     2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment to the database.\n\n                     4.  The system returns the updated Environment.                                                                                                                           |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                                   \n\n\n                     2.  At Basic Flow step 3, the system checks whether the Environment Variable already exists. If it does not, an error message \u201cEnvironment does not exist.\u201d is returned.  |\n\n\n\n| \nPostcondition\n     | The Environment has been updated in the database.                                                                                                                        |\n\n\n\n\nDelete Environment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Name\n\n\nManage Environment\n\n\n\n\n\n\nTrigger\n\n\nThe User chooses to delete an Environment from the database.\n\n\n\n\n\n\nPrecondition\n\n\n1.  The User has logged in.\n\n\n\n\n\n\n\n\n                     2.  The User has chosen to delete the Environment.                                                                                                       |\n\n\n\n| \nBasic Flow\n        | 1.  The system accesses the Hawkengine database.                                                                                                        \n\n\n                     2.  The system deletes the Environment from the database.\n\n                     3.  The system notifies the User that the Environment has been deleted.                                                                                  |\n\n\n\n| \nAlternative Flows\n | 1.  At Basic Flow step 2, the system checks whether the Environment exists. If it does not, an error message \u201cEnvironment does not exist.\u201d is returned. |\n| \nPostcondition\n     | The Environment has been deleted from the database.                                                                                                     |\n\n\nOther Requirements\n\n\nThe server should support 2 types of databases: MongoDB and Redis. Redis is in memory store that can be used for small scale projects that would enable easy setup and run scenarios. Its main limitation is the memory of the machine it runs on. MongoDb is a fully fledged document based database engine that will be used in enterprise deployments.\n\n\nAppendix A: Glossary\n\n\nAppendix C: To Be Determined List\n\n\nCollect a numbered list of the TBD (to be determined) references that remain in the SRS so they can be tracked to closure.", 
            "title": "Software Requirements Specification"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#hawkcd-srs", 
            "text": "Requirements Specification   Prepared by:   Margarita Ivancheva  Vladislav Nikolov  Simeon Petrov  Mariyan Stefanov  Radoslav Minchev   Version 1.0 approved  April 15, 2016", 
            "title": "HawkCD - SRS"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#table-of-contents", 
            "text": "Introduction  Use Cases   Manage Pipeline Group (#001)  Manage Pipeline (#002)  Manage Stage (#003)  Manage Job (#004)  Manage Task (#005)  Manage Material (#006)  Manage Agent (#007)  Manage Environment Variable (#008)  Manage Environment (#009)  Manage Authentication and Authorization (#010)  Use Case #001 - Manage Pipeline Group   Functional requirements", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#purpose", 
            "text": "The current SRS document tries to define the MVP (Minimum Viable Product) scope for the Hawkengine System targeted to be released as version 1 and elaborate in details the product requirements.", 
            "title": "Purpose"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#intended-audience-and-reading-suggestions", 
            "text": "The intended audience of this document is all members directly or indirectly involved in the project: Developers, Quality Assurance Engineers, Product and Project Managers and Marketing staff. The document should be read from top to bottom to understand the overall concept the Hawkengine System implements. Each use case is self-contained. It details one or many features of the system related to a logical area of the Application, e.g. \u201cPipeline Management\u201d and \u201cAuthentication   Authorization\u201d.", 
            "title": "Intended Audience and Reading Suggestions"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#product-perspective", 
            "text": "The Hawkengine System intends to be a one stop solution for managing Continuous Delivery processes for the Enterprise. It will enable and encourage collaboration between delivery team members including but not limited to Developers, QA, Ops and Release Managers.", 
            "title": "Product Perspective"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#user-classes-and-characteristics", 
            "text": "Developer    Quality Assurance Engineer    DevOps Engineer    Operations Engineer    Release Manager", 
            "title": "User Classes and Characteristics"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#operating-environment", 
            "text": "The System runs on all Operating Systems that support the JVM.  The main testing will be performed under the following Operating Systems:    Windows Server 2012 and above    Ubuntu 14.04 LTS", 
            "title": "Operating Environment"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description", 
            "text": "This use case allows an Administrator to create a new Pipeline Group. He/she can also modify or delete a certain Pipeline Group, depending on the intention.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow", 
            "text": "", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#log-on", 
            "text": "This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.", 
            "title": "Log On"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#create-pipeline-group", 
            "text": "The system provides the operations available to the Administrator. These operations are: Create, Modify and Delete Pipeline Group. The Administrator chooses \u201cCreate Pipeline Group\u201d option.", 
            "title": "Create Pipeline Group"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#submit-the-pipeline-group", 
            "text": "The system provides an option for the Administrator to enter a name for the new Pipeline Group. The Administrator can modify the name as desired until choosing to submit the Pipeline Group. At this point the system validates the entered value and saves the Pipeline Group. The use case ends.", 
            "title": "Submit the Pipeline Group"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flows", 
            "text": "", 
            "title": "Alternative Flows"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#modify-pipeline-group", 
            "text": "At basic flow step  Create Pipeline Group , the Administrator already has a Pipeline Group that has been created. The system retrieves and displays the Pipeline Group on focus and allows him/her to use it as a starting point. The use case resumes at basic flow step  Submit the Pipeline Group .", 
            "title": "Modify Pipeline Group"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-pipeline-group", 
            "text": "At basic flow step  Create Pipeline Group , the Administrator already has a Pipeline Group created and chooses to delete it. This option is available to the Administrator only when the Pipeline Group does not contain any Pipelines. The system deletes the Pipeline Group. The use case ends.", 
            "title": "Delete Pipeline Group"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#unauthorized-user", 
            "text": "At basic flow step  Log On , the system establishes whether the User is authorized for such operations. There are three basic cases when the user is denied access:", 
            "title": "Unauthorized User"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#operator", 
            "text": "In cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Pipeline Groups. He/she has the same accessibility level as Viewer.", 
            "title": "Operator"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#viewer", 
            "text": "In cases, when the user is with Viewer permission status, he/she is not able to create, modify or delete Pipeline Groups. He/she can only observe the specific Pipeline Group, if he/she is within one of the following groups:", 
            "title": "Viewer"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#server-viewer", 
            "text": "The user has global view access.", 
            "title": "Server Viewer"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#pipeline-group-viewer", 
            "text": "The user can observe the specific Pipeline Group and its successors.", 
            "title": "Pipeline Group Viewer"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#unauthenticated-user", 
            "text": "In cases, when the user\u2019s credentials are not valid, a proper error message displays and the use case ends.  For further explanation regarding authentication and authorization, please refer to  Authentication and Authorization Section .*", 
            "title": "Unauthenticated User"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#quit", 
            "text": "The system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.", 
            "title": "Quit"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-pipeline-35002", 
            "text": "", 
            "title": "Manage Pipeline (#002)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview", 
            "text": "A Pipeline consists of multiple Stages, each of which will be run in order. If a Stage fails, then the Pipeline is considered failed and the rest of the stages will not be started.  *Pipeline status: *    Passed    Failed    In progress    Paused", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_1", 
            "text": "This use case allows an Administrator to create a new Pipeline. He/she can also modify or delete a certain Pipeline, depending on the intention. Last, but not least, the Administrator is able to run the Pipeline with latest Materials or with specific Materials. After that he/she can pause or stop the Pipeline.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_1", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_1", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_1", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.    Create Pipeline    The system provides the operations available to the Administrator. These operations are: Create, Modify or Delete Pipeline. The Administrator chooses \u201cCreate Pipeline\u201d option.    Fill the Pipeline Options    The system provides the Administrator with a set of fields to fill. The Administrator can add and modify the name of the Pipeline, as well as the Stage and Materials.    Submit the Pipeline    The Administrator indicates that the operation based on creating a new Pipeline is completed. The system validates all of the entered values and saves the Pipeline. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flows_1", 
            "text": "Modify Pipeline      At basic flow step  Create Pipeline , the Administrator already has a Pipeline that has been created. The system retrieves and displays the Pipeline on focus. The Administrator has a set of options to choose from:    General Options    The Administrator can modify the general options of the selected pipeline.    Material Options    The Administrator can add, modify or delete an existing Material.    Stage Options    The Administrator can add, modify or delete an existing Stage.    Environment Variable Options    The Administrator can add, modify or delete an existing Environment Variable.    Lock Option    The Administrator has the option to lock a specific Pipeline. He/she might consider this \u043eption if he/she wants to make sure that a single instance of a pipeline can run at a time, especially when the Stages of the Pipeline are related to one another. The system registers the changes and initializes the process of locking the Pipeline. The use case resumes at  Submit the Pipeline  basic flow.  The Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Pipeline and the use case ends. The use case resumes at basic flow step  Submit the Pipeline .    Delete Pipeline    At basic flow step  Create Pipeline , the Administrator already has a Pipeline created and chooses to delete it. The system warns the user that he/she is about to delete a Pipeline. The Administrator confirms the deletion. The system deletes the Pipeline, as well as the Pipeline\u2019s runs. However, the Pipeline\u2019s artifacts are not removed, since there can be interrelation with other pipelines. The use case ends.    Run Pipeline    At basic flow step  Create Pipeline , the Administrator already has a Pipeline and chooses to run it. The system provides a set of options for the Administrator to choose from for triggering the run of the pipeline:    Automatic Trigger    By default, the server is set to automatically trigger pipelines. Whenever a Material from this Pipeline is updated, the pipeline run is triggered.    Manual Trigger    When the Pipeline is manually triggered, the server obligatorily checks for the latest Materials and schedules the Pipeline. The Administrator is able to:    Run Pipeline    The Administrator sets the Pipeline to begin build activity.    Run Pipeline-specific    The Administrator decides which specific Materials will be used to run the Pipeline, and triggers it.  During each of the triggered processes the Administrator can:    Pause Pipeline    The Administrator pauses the scheduled Pipeline. At this point the system prevents any new pipeline activity, while letting the Pipeline proceed until it completes the job currently \u201crunning\u201d.    Stop Pipeline    The Administrator stops the scheduled Pipeline.    Unauthorized User    At basic flow step  Log On , the system establishes whether the User is authorized for such operations. There are three basic occasions when the user is denied access:    Operator    In cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Pipelines. He/she has the same accessibility level as Viewer and can perform alternative flow  Run Pipeline .    Viewer    In cases, when the user is with Viewer permission status, he/she is not able to create, modify, delete or run Pipelines. He/she can only observe the specific Pipeline, if he/she is within one of the following groups:    Server Viewer    The user has global view access.    Pipeline Group Viewer    The user can observe the specific Pipeline Group and its successors.    Pipeline Viewer    The user can observe the specific Pipeline and its successors.    Environment Viewer    The user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.    Unauthenticated User    In cases, when the user\u2019s credentials are not valid, a proper error message displays and the use case ends.  For further explanation regarding authentication and authorization, please refer to  Authentication and Authorization Section .    Quit    The system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.    Invalid Name    At basic flow step  Create Pipeline  the system determines that the name of the Pipeline is not valid and displays an error message. The use case ends.", 
            "title": "Alternative Flows"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-stage-35003", 
            "text": "", 
            "title": "Manage Stage (#003)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_1", 
            "text": "A Stage consists of multiple jobs, each of which can run independently of the others. This means that Hawkengine can and does parallelize the runs of Jobs in a Stage. If a Job fails, then the Stage is considered failed. However, since Jobs are independent of each other, all other Jobs in the Stage will also be run.  Stage Status:    Passed    Failed    In progress    Paused", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_2", 
            "text": "This use case allows an Administrator to create a new Stage. He/she can also modify or delete a certain Stage, depending on the intention. Last, but not least, the Administrator is able to run the Stage with all Jobs or specific Jobs.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_2", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_2", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_2", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.    Choose Pipeline    The Administrator chooses in which Pipeline to create a Stage.    Create Stage    The system provides the operations available to the Administrator to create a new Stage within the chosen Pipeline. These operations are: Create, Modify or Delete Stage. The Administrator chooses \u201cCreate Stage\u201d option.    Fill the Stage Options    The system provides the Administrator with a set of fields to fill. The Administrator can add and modify the name of the Stage, the type of the Task, as well as to add Job to the Stage.    Submit the Stage    The Administrator indicates that the operation based on creating a new Stage is completed. The system validates all of the entered values and saves the Stage. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flows_2", 
            "text": "Modify a Stage      At basic flow step  Create Stage ,  the Administrator already has a Stage that has been created. The system retrieves and displays the Stage on focus. The Administrator has a set of options to choose from:    Job Options    The Administrator can modify the Job name.    Task Options    The Administrator can add, modify or delete an existing Task.    Environment Variable Options    The Administrator can add, modify or delete an existing Environment Variable.  The Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Stage and the use case ends. The use case resumes at basic flow step  Submit the Stage .    Delete a Stage.    At basic flow step  Create Stage , the Administrator already has a Stage and chooses to delete it. The system warns the user that he/she is about to delete a Stage. The Administrator confirms the deletion. The system deletes the Stage, without removing the stage runs information, since it might be used as reference to previous runs. The use case ends.    Run   Stage.    At basic flow step  Create Stage , the Administrator already has a Stage and chooses to run it. The system provides a set of options for the Administrator to choose from for running the Stage:    Run Stage    The Administrator sets the Stage to begin running an activity    Run Stage-specific    The Administrator decides which specific Jobs will be used to run the Stage, and triggers it.    Unauthorized User    At basic flow step  Log On , the system establishes whether the User is authorized for such kind of operations. There are three basic occasions when the user is denied access:    Operator    In cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Stages. He/she has the same accessibility level as Viewer and can perform alternative flow  Run Stage .    Viewer    In cases, when the user is with Viewer permission status, he/she is not able to create, modify, delete or run Stages. He/she can only observe the specific Stage, if he/she is within one of the following groups:    Server Viewer    The user has global view access.    Pipeline Group Viewer    The user can observe the specific Pipeline Group and its successors.    Pipeline Viewer    The user can observe the specific Pipeline and its successors.    Environment Viewer    The user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.    Unauthenticated User    At basic flow step  Log On , the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.  For further explanation regarding authentication and authorization, please refer to  Authentication and Authorization Section .    Quit    The system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.    Invalid Name    At basic flow step  Create Stage  the system determines that the name of the Stage is not valid and displays an error message. The use case ends.", 
            "title": "Alternative Flows"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-job-35004", 
            "text": "", 
            "title": "Manage Job (#004)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_2", 
            "text": "A job consists of multiple Tasks, each of which will be run in order. If a Task in a Job fails, then the Job is considered failed, and unless specified otherwise, the rest of the Tasks in the Job will not be run.  Job Status:    Passed    Failed    Awaiting - awaiting agent assignment    Scheduled - job assigned for execution    Running - executing", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_3", 
            "text": "This use case allows an Administrator to create a new Job. He/she can also modify or delete a certain Job, depending on the intention.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_3", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_3", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_3", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.    Choose Pipeline    The Administrator chooses in which Pipeline to operate.    Choose Stage    The Administrator chooses in which Stage to create a Job.    Create Job    The system provides the operations available to the Administrator to create a new Job within the chosen Stage. These operations are: Create, Modify or Delete Job. The Administrator chooses \u201cCreate Job\u201d option.    Fill the Job Options    The system provides the Administrator with set of fields to fill. The Administrator can add and modify the name of the Job, as well as the type of the Task.    Submit the Job    The Administrator indicates that the operation based on creating a new Job is completed. The system validates all of the entered values and saves the Job. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flows_3", 
            "text": "Modify Job      At basic flow step  Create Job ,  the Administrator already has a Job that has been created. The system retrieves and displays the Job on focus. The Administrator has a set of options to choose from:    Job Options    The Administrator can modify the Job name.    Task Options    The Administrator can add, modify or delete an existing Task.    Environment Variable Options    The Administrator can add, modify or delete an existing Environment Variable.  The Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Job and the use case ends. The use case resumes at basic flow step  Submit the Job .    Delete Job.    At basic flow step  Create Job , the Administrator already has a Job and chooses to delete it. The system warns the user that he/she is about to delete a Job. The Administrator confirms the deletion. The system deletes the Job. The use case ends.    Unauthorized User    At basic flow step  Log On , the system establishes whether the User is authorized for such operations. There are three basic occasions when the user is denied access:    Operator    In cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Jobs. He/she has the same accessibility level as Viewer.    Viewer    In cases, when the user is with Viewer permission status, he/she is not able to create, modify or delete Jobs. He/she can only observe the specific Job, if he/she is within one of the following groups:    Server Viewer    The user has global view access.    Pipeline Group Viewer    The user can observe the specific Pipeline Group and its successors.    Pipeline Viewer    The user can observe the specific Pipeline and its successors.    Environment Viewer    The user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.    Unauthenticated User    At basic flow step  Log On , the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.  For further explanation regarding authentication and authorization, please refer to  Authentication and Authorization Section .    Quit    The system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.    Invalid Name    At basic flow step Create Job the system determines that the name of the Job is not valid and displays an error message. The use case ends.", 
            "title": "Alternative Flows"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-task-35005", 
            "text": "", 
            "title": "Manage Task (#005)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_3", 
            "text": "A task is an action that needs to be performed. Usually, it is a single command.", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_4", 
            "text": "This use case allows an Administrator to create a new Task. He/she can also modify or delete a certain Task, depending on the intention.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_4", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_4", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_4", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.    Choose Pipeline    The Administrator chooses in which Pipeline to operate.    Choose Stage    The Administrator chooses in which Stage to operate.    Choose Job    The Administrator chooses in which Job to create a new Task.    Create Task    The system provides the operations available to the Administrator to create a new Task within the chosen Job. These operations are: Create, Modify or Delete Task. The Administrator chooses \u201cCreate Task\u201d option.    Fill the Task Options    The system provides the Administrator with a set of fields to fill. The Administrator can modify the type of the Task. The system provides a list with different Task types. The Administrator chooses Exec Task. The system provides a set of fields that should be filled.    Submit the Task    The Administrator indicates that the operation based on creating a new Task is completed. The system validates all of the entered values and saves the Task. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flows_4", 
            "text": "Modify a Task      At basic flow step  Create Task ,  the Administrator already has a Task that has been created. The system retrieves and displays the Task on focus. The Administrator has a set of options to choose from:    Task Command    The Administrator can modify the Task command.    Arguments    The Administrator can modify the arguments.    Working Directory    The Administrator can modify the working directory.    Run Condition    The Administrator can modify the condition under which the Task will run.    Ignore Errors    The Administrator can check the option to ignore errors.  The Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Task and the use case ends. The use case resumes at basic flow step  Submit the Task .    Delete a Task    At basic flow step  Create Task , the Administrator already has a Task and chooses to delete it. The system warns the user that he/she is about to delete a Task. The Administrator confirms the deletion. The system deletes the Task. The use case ends.    Task Type    At basic flow step  Create Task , the Administrator has the option to choose the Task type. There are four different options:    Exec Task    Creates an Execution Task with command, arguments, working directory, run condition and ignore errors options.    Fetch Artifact Task    Creates a Fetch Artifact Task with specific Pipeline, Stage, Job, source, destination and run condition.    Fetch Material Task    Creates a Fetch Material Task with specific Material and run condition.    Upload Artifact Task    Creates a Upload Artifact Task with specific source, destination and run condition.    Modify Task Change    At alternative flow step  Modify Task , the system provides different options depending on which Task type the Administrator has created. The options are based on alternative flow step  Task Type .    Unauthorized User    At basic flow step  Log On , the system establishes whether the User is authorized for such operations. There are three basic occasions when the user is denied access:    Operator    In cases, when the user is with Operator permission status, he/she is not able to create, modify or delete Tasks. He/she has the same accessibility level as Viewer .    Viewer    In cases, when the user is with Viewer permission status, he/she is not able to create, modify or delete Tasks. He/she can only observe the specific Task, if he/she is within one of the following groups:    Server Viewer    The user has global view access.    Pipeline Group Viewer    The user can observe the specific Pipeline Group and its successors.    Pipeline Viewer    The user can observe the specific Pipeline and its successors.    Environment Viewer    The user can observe the specific Pipeline and its successors, if the current Pipeline is within the Environment.    Unauthenticated User    At basic flow step  Log On , the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.  For further explanation regarding authentication and authorization, please refer to  Authentication and Authorization Section .    Quit    The system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.    Invalid Name    At basic flow step  Create Task  the system determines that the name of the Task is not valid and displays an error message. The use case ends.", 
            "title": "Alternative Flows"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-material-35006", 
            "text": "", 
            "title": "Manage Material (#006)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_4", 
            "text": "A Material is a cause for a pipeline to run. Often, it is a source code material repository (Git, TFS, etc). The Hawkengine System continuously polls configured Materials and when a new change or commit is found, the corresponding Pipelines are run or \"triggered\".  There are different kinds of Materials. An example can be a Git Material. When a commit is made to the repository configured in the Git Material, the pipeline gets triggered.  A Pipeline can even be configured with multiple Materials. When either repository has a new commit, the Pipeline is triggered.", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_5", 
            "text": "This use case allows an Administrator to create a new Material. He/she can also modify or delete a certain Material, depending on the intention.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_5", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_5", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_5", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system authenticates them.    Choose Pipeline    The Administrator chooses in which Pipeline to create a Material.    Create Material    The system provides the operations available to the Administrator to create a new Material within the chosen Pipeline. These operations are: Create, Modify or Delete Material. The Administrator chooses \u201cCreate Material\u201d option.    Fill the Material Options    The system provides the Administrator with a set of fields to fill. The Administrator can modify the type of the Material. The system provides two options. The Administrator chooses Git Material. The system provides a set of fields that should be filled. The Administrator enters name for the Material, Git url and credentials.    Submit the Material    The Administrator indicates that the operation based on creating a new Material is completed. The system validates all of the entered values and saves the Material. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flows_5", 
            "text": "Create NuGet Material      At basic flow step  Create Material ,  the Administrator chooses NuGet Material. The system provides a set of fields that should be filled. The Administrator enters Material name, NuGet url, NuGet package and credentials. He/she is also able to choose whether the Material to include can be a pre-release. The use case resumes at basic flow step  Submit the Material .    Modify Material    At basic flow step  Create Material ,  the Administrator already has a Material that has been created. The system retrieves and displays the Material on focus. The Administrator has a set of options to modify:    Material Name    The Administrator can modify the Material name.    Git Url    The Administrator can modify the Git Url of the Material.    Git Branch    The Administrator can modify the Git Branch of the Material.    Poll for Changes    The Administrator can choose to poll for changes.    Credentials    The Administrator should enter his/her Git credentials, if the Git repository is private.    Delete a Material.    At basic flow step  Create Material ,  the Administrator already has a Material and chooses to delete it. The system warns the user that he/she is about to delete a Material. The Administrator confirms the deletion. The system deletes the Material. The use case ends.    Unauthenticated User    At basic flow step  Log On ,  the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.    Quit    The system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.    Invalid Name    At basic flow step  Create Material  the system determines that the Material name is not valid and displays an error message. The use case ends.    Invalid Url    At basic flow step  Create Material  the system determines that the Material Url is not valid and displays an error message. The use case ends.    Invalid Credentials    At basic flow step  Create Material  the system determines that the Material credentials are not valid and displays an error message. The use case ends.", 
            "title": "Alternative Flows"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-agent-35007", 
            "text": "", 
            "title": "Manage Agent (#007)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_5", 
            "text": "Hawkengine Agents are the workers that execute the Jobs/Tasks. All Tasks configured in the system run on Hawkengine Agents. The Hawkengine Server polls for changes in Materials and then, when a change is detected and a Pipeline needs to be triggered, the corresponding Jobs are assigned to the Agents, for them to execute the Tasks.  Agents pick up Jobs which are assigned to them, execute the Tasks in the Job and report the status of the Job to the Hawkengine Server. Then, the Server collects all the information from the different Jobs and then decides on the status of the Stage.  Agents and Jobs can be enhanced with \"Resources\". Resources are free-form tags, that help Hawkengine decides which Agents are capable of picking up specific Jobs. The resources can be thought of as the Agent broadcasting its capabilities. Resources are defined by administrators and can mean anything the administrators want them to mean.", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_6", 
            "text": "This use case allows an Administrator to modify or delete a certain Agent, depending on the intention.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_6", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_6", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_6", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.    Choose Agent    The Administrator chooses with which Agent to operate.    Choose Agent Option    The system provides the operations available to the Administrator to elaborate. The operations are: Enable/Disable Agent, Edit Resources and Delete Agent. The Administrator chooses \u201cEnable/Disable Agent\u201d option.    Enable Agent    When an Agent first connects to the Server it is \u201cDisabled\u201d. The Administrator chooses to enable Agent in order to schedule work on it.    Submit the Agent    The Administrator indicates that the operation regarding the state of the Agent is completed. The system saves the changes. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flow", 
            "text": "Add Resources      At basic flow step  Choose Agent Option , the Administrator chooses to Edit Resources. The system provides a set of options. The Administrator chooses to Add new Resource. He/she enters the Resource name and submits the result.    Delete Resources    At basic flow step  Choose Agent Option , the Administrator chooses to Edit Resources. The system provides a set of options. The Administrator chooses to Delete Resource. The system warns the user that he/she is about to delete a Resource. The Administrator confirms the deletion. The system deletes the Resource. The use case ends.    Delete Agent    At basic flow step  Choose Agent Option , the Administrator chooses to Delete Agent. The system warns the user that he/she is about to delete an Agent. The Administrator confirms the deletion. The system deletes the Agent. The use case ends.    Unauthenticated User    At basic flow step  Log On , the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.", 
            "title": "Alternative Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-environment-variable-35008", 
            "text": "", 
            "title": "Manage Environment Variable (#008)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_6", 
            "text": "In Hawkengine Server, Environment Variables are user-defined variables that are defined in the configuration. These environment variables are made available to tasks just like other environment variables available to processes when they run in an operation system.  Environment Variables can be defined at multiple levels: Within Environments, within Pipelines, within Stages and within Jobs. They follow a cascading system where Environment Variables defined at the Environment level get overridden by Environment Variables defined at the Pipeline level and so on.", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_7", 
            "text": "This use case allows an Administrator to create a new Environment Variable. He/she can also modify or delete a certain Environment Variable, depending on the intention.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_7", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_7", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_7", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.    Choose Pipeline    The Administrator chooses in which Pipeline to create an Environment Variable.    Create Environment Variable    The system provides the operations available to the Administrator to create a new Environment Variable within the chosen Pipeline. These operations are: Create, Modify or Delete an Environment Variable. The Administrator chooses \u201cCreate Environment Variable\u201d option.    Fill the Environment Variable Options    The system provides the Administrator with a set of fields to fill. The Administrator can add or modify the name of the Environment Variable, the value of the Environment Variable, as well as to choose whether the Environment Variable will be secured.    Submit the Environment Variable    The Administrator indicates that the operation based on creating a new Environment Variable is completed. The system validates all of the entered values and saves the Environment Variable. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flow_1", 
            "text": "Modify Environment Variable      At basic flow step  Create Environment Variable ,  the Administrator already has an Environment Variable that has been created. The system retrieves and displays the Environment Variable on focus. The Administrator has set of options to choose from:    Environment Variable Name    The Administrator can modify the Environment Variable name.    Environment Variable Value    The Administrator can modify the Environment Variable value.    Environment Variable Security    The Administrator can modify the Environment Variable security.  The Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Environment Variable and the use case ends. The use case resumes at basic flow step  Submit the Environment Variable .    Delete Environment Variable    At basic flow step  Create Environment Variable , the Administrator already has an Environment Variable created and chooses to delete it. The system warns the user that he/she is about to delete an Environment Variable. The Administrator confirms the deletion. The system deletes the Environment Variable. The use case ends.    Add Stage Environment Variable    At basic flow step  Create Environment Variable , the Administrator is able to choose in which Stage to add the Environment Variable. Once, he/she chooses the desired Stage, the use case resumes at  Fill the Environment Variable Options  basic flow step.    Add Job Environment Variable    At basic flow step  Create Environment Variable , the Administrator is able to choose in which Job to add the Environment Variable. Once, he/she chooses the desired Job, the use case resumes at  Fill the Environment Variable Options  basic flow step.    Unauthenticated User    At basic flow step  Log On , the system establishes whether the Administrator is valid. In case, he/she is not, a proper error message displays and the use case ends.    Quit.    The system allows the Administrator to quit at any time during the use case. The Administrator chooses not to save any of the entered information or decides to switch to another view, without submitting the changes, all the entered information will be discarded. The use case ends.", 
            "title": "Alternative Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-environment-35009", 
            "text": "", 
            "title": "Manage Environment (#009)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_7", 
            "text": "An Environment is a group of Agents that allows to distribute Jobs. It is a logical boundary for Job execution. Common examples of environments are  Test ,  Acceptance ,  Staging  or  Production . An Environment can be assigned to multiple Agents and Pipelines. One Pipeline can belong to more than one Environment, however, one Agent can only belong to one Environment*. *  Access to an Environment should be controlled by the system RBAC model. There should be a way to limit access to Environments for specific users and groups.", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_8", 
            "text": "This use case allows an Administrator to create, modify or delete Environments", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_8", 
            "text": "Primary Actor - Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_8", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_8", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.    Create Environment    The system provides the operations available to the Administrator to manage Environments. These operations are: Create, Modify or Delete Environment. The Administrator chooses \u201cCreate Environment\u201d option.    Fill the Environment Options    The system provides the Administrator with a set of fields to fill. The Administrator can modify:    Environment Name    The Administrator should provide a name for the Environment.    Environment Variables    The Administrator may add one or more Environment Variables that need to be passed.    Pipelines    The Administrator may add one or more Pipelines that need to run on the Environment.    Agents    The Administrator may add one or more Agents associated with the Environment.    Submit the Environment    The Administrator indicates that the operation based on creating a new Environment is completed. The system validates all of the entered values and saves the Environment. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flow_2", 
            "text": "Modify Environment      At basic flow step  Create Environment ,  the Administrator already has an Environment that has been created. The system retrieves and displays the Environment on focus. The Administrator has a set of options to modify:    Environment Name    The Administrator can modify the Environment name.    Environment Variables    The Administrator can add or remove Environment Variables.    Pipelines    The Administrator can add Pipelines that need to run on the particular Environment, or remove the ones that are no longer needed.    Agents    The Administrator can add unassigned Agents to the Environment, or remove some, making them free for further association.  The Administrator can modify all of the options as desired until choosing to submit the changes. At this point the system saves the updated Environment. The use case resumes at basic flow step  Submit the Environment .    Delete Environment    At basic flow step  Create Environment , the Administrator already has an Environment created and chooses to delete it. The system warns the user that he/she is about to delete an Environment. The Administrator confirms the deletion. The system deletes the Environment. The use case ends.    Unauthenticated User    At basic flow step  Log On , the system establishes whether credentials of the Administrator are valid. In case, he/she is not, a proper error message displays and the use case ends.", 
            "title": "Alternative Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#manage-authentication-and-authorization-35010", 
            "text": "", 
            "title": "Manage Authentication and Authorization (#010)"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#overview_8", 
            "text": "The server has the notion for  scope  and  permission types . A scope represents a certain level from the server where specific rights can be applied. On the other hand,  permission types  define the rights - what a user can do from a specific scope. Combining both concepts (scope   permission types) provides a flexible authorization model.  *Permission Scopes *     Server - global server scope    Pipeline group - pipeline group level    Pipeline - pipeline level scope    Environment - environment scope     Permission Types     Viewer - a user can only view a given resource and its child resources    Operator - a user can view and operate (run, re-run, pause, stop, etc.) a given resource (e.g. Pipeline   Stage) and its child resources    Admin    Groups   A group is a set of claims (scope + permissions) that are grouped together. A group would ease the authorization management across groups of people. E.g. if we have 3 teams dev, qa   ops, rather than assigning permissions individually to each team member, we would create a group and add scope and permissions to it, then add the members to the group, so that they inherit all of the group\u2019s permissions.   Permission Inheritance   If a user is assigned a  pipeline group  scope and an  admin  permission type that would mean that all resources that are children of the current pipeline group (scope) e.g. one or more pipelines, will obey the permission assigned to their parent - pipeline group.   Overriding Permissions   This is the case when we want to give a user permissions at a given scope e.g. \"pipeline group\", however we need to either restrict or broaden the rights to one or more child resources, e.g. Pipelines.  Given is a Pipeline group named \"Dev pipelines\" and we want to have one of our teams to have view rights for the group. Combining the  Pipeline Group  scope and the  view  permission type would allow anyone of the team to see all pipelines. However, if we want the Development Lead of the team to be able to administer one or more pipelines from the group, but not all of them, we would assign in addition to its view rights inherited from the pipeline group scope, a  pipeline  scope with  admin  permission for a concrete pipelines that he needs administration rights for. In fact we'll override the inherited rights he received as part of the  Pipeline group  scope.", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#brief-description_9", 
            "text": "This use case allows an Administrator to modify team permissions, as well as individual permissions.", 
            "title": "Brief Description"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#actors_9", 
            "text": "Primary Actor - Server Administrator", 
            "title": "Actors"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#flow-of-events_9", 
            "text": "", 
            "title": "Flow of Events"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#basic-flow_9", 
            "text": "Log On      This use case starts when an Administrator accesses the Hawkengine System. The Administrator enters an email and password and the system validates them.    Choose team of people    The Administrator chooses which team to assign to the desired project.    Set permission for the team    The system provides a set of options for the Administrator to choose from:    Server Admin    The Administrator gives global Admin rights to the team. The team members will be able to fully operate on a global level.    Pipeline Group Admin    The Administrator gives Pipeline Group Admin level rights to the team. The team members will be able to fully operate on a Pipeline Group level.    Pipeline Admin    The Administrator gives Pipeline Admin level rights to the team. The team members will be able to fully operate on a Pipeline level.    Environment Admin    The Administrator gives Environment Admin level rights to the team. The team members will be able to fully operate on an Environment level.    Server Operator    The Administrator gives Server Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on a Server level.    Pipeline Group Operator    The Administrator gives Pipeline Group Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on a Pipeline Group level.    Pipeline Operator    The Administrator gives Pipeline Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on a Pipeline level.    Environment Operator    The Administrator gives Environment Operator level rights to the team. The team members will be able to operate (run, re-run, pause, stop, etc.) on an Environment level.    Server Viewer    The Administrator gives Server Viewer level rights to the team. The team members will be able to observe on a Server level.    Pipeline Group Viewer    The Administrator gives Pipeline Group Viewer level rights to the team. The team members will be able to observe on a Pipeline Group level.    Pipeline Viewer    The Administrator gives Pipeline Viewer level rights to the team. The team members will be able to observe on a Pipeline level.    Environment Viewer    The Administrator gives Environment Viewer level rights to the team. The team members will be able to observe on an Environment level.  The Administrator chooses the Pipeline Group Viewer as an option for team permissions.    Submit Permission Changes    The Administrator indicates that the operation based on the team permissions is completed. The system validates all of the information provided. The use case ends.", 
            "title": "Basic Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#alternative-flow_3", 
            "text": "Override individual permissions for person.      At basic flow step  Set permission for the team , the system provides options for individual permissions. The Administrator can:     Restrict team member rights   Choose team member      The Administrator chooses the team member whose permissions he/she will restrict.    Set individual permissions    The Administrator chooses to set Pipeline Viewer level rights to the team member, not the Pipeline Group Viewer level rights as was previously initialized. The team member will no longer be able to observe the Pipeline Group operations, but only the ones associated with the chosen Pipeline.     Broaden team member rights   Choose team member      The Administrator chooses the team member whose permissions he/she will broaden.    Set individual permissions    The Administrator chooses to set Pipeline Group Operator level rights to the team member, not the Pipeline Group Viewer level rights as was previously initialized. The team member will be able to operate within the Pipeline Group, not only to observe.  The Administrator can modify the permissions as desired until choosing to submit the changes. At this point the system saves the updated permissions for the team member. The use case resumes at basic flow step  Submit Permission Changes.     Update team permission to   Pipeline Group Admin      At basic flow step  Set permission for the team ,  the Administrator chooses to set the team permissions to Pipeline Group Admin. In this way, the team members will be eligible to fully operate within the Pipeline Group.    Pipeline Group Operator    At basic flow step  Set permission for the team ,  the Administrator chooses to set the team permissions to Pipeline Group Operator. In this way, the team members will be eligible to operate (run, re-run, pause, stop, etc.) within the Pipeline Group.", 
            "title": "Alternative Flow"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#functional-requirements", 
            "text": "This section includes the requirements that specify all the fundamental actions of the software system.     Use Case #001 - Manage Pipeline Group \n    ----------------------------------------", 
            "title": "Functional Requirements"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-pipeline-group", 
            "text": "Use Case Name  Manage Pipeline Group    Trigger  The User chooses to add a new Pipeline Group to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add a new Pipeline Group.                                                                                                                            |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Pipeline Group to the database.\n\n                     4.  The system returns the newly created Pipeline Group.                                                                                                                        |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                    2.  At Basic Flow step 3, the system checks whether a Pipeline Group with the same name already exists. If this is the case, an error with an appropriate message is returned.  |  |  Postcondition      | The Pipeline Group has been added to the database.                                                                                                                             |\n|  Exception Paths    | The User may abandon the operation at any time, without saving the information.                                                                                                |", 
            "title": "Add Pipeline Group"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-pipeline-group", 
            "text": "Use Case Name  Manage Pipeline Group    Trigger  The User chooses to update a Pipeline Group in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update Pipeline Group.                                                                                                 |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                  2.  The system accesses the Hawkengine database.\n\n                     3.  The system updates the Pipeline Group in the database.\n\n                     4.  The system returns the updated the Pipeline Group.                                                                                            |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                      2.  At Basic Flow step 3, the system checks whether the Pipeline Group exists. If it does not, an error with an appropriate message is returned.  |  |  Postcondition      | The Pipeline Group has been updated in the database.                                                                                             |\n|  Exception Paths    | The User may abandon the operation at any time, without saving the information.                                                                  |", 
            "title": "Update Pipeline Group"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-pipeline-group_1", 
            "text": "Use Case Name  Manage Pipeline Group    Trigger  The User chooses to delete a Pipeline Group from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Pipeline Group.                                                                                                                                   |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                                                              2.  The system deletes the Pipeline Group from the database.\n\n                     3.  The system notifies the User that the Pipeline Group has been deleted.                                                                                                              |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Pipeline Group exists or contains any Pipelines. Either way, if it does not, an error with an appropriate message is returned. |\n|  Postcondition      | The Pipeline Group has been deleted from the database.                                                                                                                                 |\n|  Exception Paths    | The User may abandon the operation at any time, without saving the information.                                                                                                        |    Use Case #002 - Manage Pipeline \n    ----------------------------------", 
            "title": "Delete Pipeline Group"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-pipeline", 
            "text": "Use Case Name  Manage Pipeline    Trigger  The User chooses to add a new Pipeline to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add new Pipeline.                                                                                                                                                                          |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                                                      2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Pipeline to the database.\n\n                     4.  The system returns the newly created Pipeline.                                                                                                                                                                    |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                                                          2.  At Basic Flow step 3, the system checks whether a Pipeline with the same name within the same Pipeline Group already exists. If it does, an error message \u201cPipeline {pipelineName} already exists.\u201d is returned.  |  |  Postcondition      | The Pipeline has been added to the database.                                                                                                                                                                         |", 
            "title": "Add Pipeline"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-pipeline", 
            "text": "Use Case Name  Manage Pipeline    Trigger  The User chooses to update a Pipeline in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update the Pipeline.                                                                                                                   |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                  2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Pipeline to the database.\n\n                     4.  The system returns the updated Pipeline.                                                                                                                      |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                      2.  At Basic Flow step 3, the system checks whether the Pipeline exists. If it does not, an error message \u201cPipeline {pipelineName} does not exist.\u201d is returned.  |  |  Postcondition      | The Pipeline has been updated in the database.                                                                                                                   |", 
            "title": "Update Pipeline"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-pipeline", 
            "text": "Use Case Name  Manage Pipeline    Trigger  The User chooses to delete a Pipeline from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Pipeline.                                                                                                                   |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                                        2.  The system deletes the Pipeline from the database.\n\n                     3.  The system notifies the User that the Pipeline has been deleted.                                                                                              |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Pipeline exists. If it does not, an error message \u201cPipeline {pipelineName} does not exist.\u201d is returned. |\n|  Postcondition      | The Pipeline has been deleted from the database.                                                                                                                 |\n|  Exception Paths    | The User may abandon the operation at any time, without saving the information.                                                                                  |", 
            "title": "Delete Pipeline"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#run-pipeline", 
            "text": "Use Case Name  Manage Pipeline    Trigger  The User chooses to run a Pipeline.    Precondition  1.  The User has logged in.                          2.  The User has chosen to run a Pipeline with a single Job or it was triggered automatically.\n\n                     3.  An eligible Agent within the current Environment.                                                                                                             |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                                        2.  The system updates all Materials within the Pipeline.\n\n                     3.  The system sets the status of the Pipeline to \u201c*in progress*\u201d.\n\n                     4.  The system sets the status of the Job to \u201c*awaiting*\u201d.\n\n                     5.  The system assigns the Job to the Agent.\n\n                     6.  The system sets the status of the Job to \u201c*scheduled*\u201d.\n\n                     7.  The Agent processes the assigned Job, meanwhile the system sets the status of the processing Job to \u201c*running*\u201d.\n\n                     8.  The Agent sets the status of the processed Job to \u201c*passed*\u201d, if all its Tasks\u2019 statuses are \u201c*passed*\u201d as well.\n\n                     9.  The system sets the status of the Pipeline to \u201c*passed*\u201d.                                                                                                     |  |  Alternative Flows  | 1.  At Basic Flow step 1, the system checks whether the Pipeline exists. If it does not, an error message \u201cPipeline {pipelineName} does not exist.\u201d is returned.                       2.  If Basic Flow step 2 fails, an error message \u201cMaterial {materialName} could not be updated. {errorReason}\u201d is returned.\n\n                     3.  At Basic Flow step 3, if the Pipeline is locked and there is a Pipeline scheduled beforehand, it will not be scheduled.\n\n                     4.  Basic Flow step 5 can fail under the following circumstances:\n\n                         1.  There is no Agent in the current Environment.\n\n                         2.  There is no eligible Agent in the current Environment:\n\n                             1.  The Agent is disabled.\n\n                             2.  The Agent is disconnected.\n\n                             3.  The Agent does not meet the required resources to process the Job.\n\n                       If this step fails, the Job status will remain \u201c*awaiting*\u201d.\n\n                     1.  At Basic Flow step 8, if any Task\u2019s status is \u201c*failed*\u201d and the option \u201cIgnore Errors\u201d is not selected, the Agent sets the Job\u2019s status to \u201c*failed*\u201d.\n\n                     2.  At Basic Flow step 9, if the Job\u2019s status is \u201c*failed*\u201d, the system sets the Pipeline\u2019s status to \u201c*failed*\u201d.                                                 |  |  Postcondition      | The Pipeline has been scheduled.                                                                                                                                 |    Use Case #003 - Manage Stage \n    -------------------------------", 
            "title": "Run Pipeline"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-stage", 
            "text": "Use Case Name  Manage Stage    Trigger  The User chooses to add a new Stage to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add a new Stage.                                                                                                                                                            |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                                       2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Stage to the database.\n\n                     4.  The system returns the newly created Stage.                                                                                                                                                        |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                                           2.  At Basic Flow step 3, the system checks whether a Stage with the same name within the same Pipeline already exists. If it does, an error message \u201cStage {stageName} already exists.\u201d is returned.  |  |  Postcondition      | The Stage has been added to the database.                                                                                                                                                             |", 
            "title": "Add Stage"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-stage", 
            "text": "Use Case Name  Manage Stage    Trigger  The User chooses to update a Stage in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update the Stage.                                                                                                                                                               |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                                           2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Stage to the database.\n\n                     4.  The system returns the updated Stage.                                                                                                                                                                  |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error with an \u201cInvalid data\u201d message is returned.                                                                                                                   2.  At Basic Flow step 3, the system checks whether a Stage with the same name within the same Pipeline already exists. If it does not, an error message \u201cStage {stageName} does not exist.\u201d is returned.  |  |  Postcondition      | The Stage has been updated in the database.                                                                                                                                                               |", 
            "title": "Update Stage"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-stage", 
            "text": "Use Case Name  Manage Stage    Trigger  The User chooses to delete a Stage from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Stage.                                                                                                             |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                               2.  The system deletes the Stage from the database.\n\n                     3.  The system notifies the User that the Stage has been deleted.                                                                                        |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Stage exists. If it does not, an error message \u201cStage {stageName} does not exist.\u201d is returned. |\n|  Postcondition      | The Stage has been deleted from the database.                                                                                                           |", 
            "title": "Delete Stage"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#run-stage", 
            "text": "Use Case Name  Manage Stage    Trigger  The User chooses to run a Stage.    Precondition  1.  The User has logged in.                          2.  The User has chosen to run the Stage or it was triggered automatically.                                                                                                |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                                                 2.  The system schedules a new Pipeline, starting from the current Stage.                                                                                                  |  |  Alternative Flows  | 1.  At Basic Flow step 1, the system checks whether the Pipeline exists. If it does not, an error with an appropriate message is returned.                                                       2.  At Basic Flow step 2, the system checks whether the Stage exists. If it does not, an error with an appropriate message is returned.\n\n                     3.  At Basic Flow step 2, the system schedules a new Pipeline. However, if the Pipeline is locked and there is a Pipeline scheduled beforehand, it will not be scheduled.  |  |  Postcondition      | The Pipeline has been scheduled starting from the current Stage.                                                                                                          |\n|  Exception Paths    | None.                                                                                                                                                                     |    Use Case #004 - Manage Job \n    -----------------------------", 
            "title": "Run Stage"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-job", 
            "text": "Use Case Name  Manage Job    Trigger  The User chooses to add a new Job to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add a new Job.                                                                                                                                                     |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                              2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Job to the database.\n\n                     4.  The system returns the newly created Job.                                                                                                                                                 |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                                  2.  At Basic Flow step 3, the system checks whether a Job with the same name within the same Stage already exists. If it does, an error message \u201cJob {jobName} already exists.\u201d is returned.  |  |  Postcondition      | The Job has been added to the database.                                                                                                                                                      |", 
            "title": "Add Job"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-job", 
            "text": "Use Case Name  Manage Job    Trigger  The User chooses to update a Job in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update the Stage.                                                                                                       |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                   2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Job to the database.\n\n                     4.  The system returns the updated Job.                                                                                                            |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                                   2.  At Basic Flow step 3, the system checks whether the Job exists. If it does not, an error message \u201cJob {jobName} does not exist.\u201d is returned.  |  |  Postcondition      | The Job has been updated in the database.                                                                                                         |", 
            "title": "Update Job"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-job", 
            "text": "Use Case Name  Manage Job    Trigger  The User chooses to delete a Job from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Job.                                                                                                         |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                         2.  The system deletes the Job from the database.\n\n                     3.  The system notifies the User that the Job has been deleted.                                                                                    |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Job exists. If it does not, an error message \u201cJob {jobName} does not exist.\u201d is returned. |\n|  Postcondition      | The Job has been deleted from the database.                                                                                                       |    Use Case #005 - Manage Task \n    ------------------------------", 
            "title": "Delete Job"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-task", 
            "text": "Use Case Name  Manage Task    Trigger  The User chooses to add a new Task to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add a new Task.                                                              |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                        2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Task to the database.\n\n                     4.  The system returns the newly created Task.                                                          |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned. |\n|  Postcondition      | The Task has been added to the database.                                                               |", 
            "title": "Add Task"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-task", 
            "text": "Use Case Name  Manage Task    Trigger  The User chooses to update a Task in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update the Task.                                                                                                        |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                   2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Task to the database.\n\n                     4.  The system returns the updated Task.                                                                                                           |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                                   2.  At Basic Flow step 3, the system checks whether the Task already exists. If it does not, an error message \u201cTask does not exist.\u201d is returned.  |  |  Postcondition      | The Task has been updated in the database.                                                                                                        |", 
            "title": "Update Task"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-task", 
            "text": "Use Case Name  Manage Task    Trigger  The User chooses to delete a Task from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Task.                                                                                                |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                 2.  The system deletes the Task from the database.\n\n                     3.  The system notifies the User that the Task has been deleted.                                                                           |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Task exists. If it does not, an error message \u201cTask does not exist.\u201d is returned. |\n|  Postcondition      | The Task has been deleted from the database.                                                                                              |    Use Case #006 - Manage Materials \n    -----------------------------------", 
            "title": "Delete Task"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-material", 
            "text": "Use Case Name  Manage Material    Trigger  The User chooses to add Material.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add new Material.                                                                                                                                                               |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                                           2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Material to the database.\n\n                     4.  The system returns the newly created Material.                                                                                                                                                         |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                                               2.  At Basic Flow step 3, the system checks whether a Material with the same name within the database already exists. If it does, an error message \u201cMaterial {materialName} already exists.\u201d is returned.  |  |  Postcondition      | The Material has been added to the database.                                                                                                                                                              |", 
            "title": "Add Material"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-material", 
            "text": "Use Case Name  Manage Material    Trigger  The User chooses to update the Material in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update a Material.                                                                       |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                    2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Material to the database.\n\n                     4.  The system returns the updated Material.                                                                        |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message. |\n|  Postcondition      | The Material has been updated.                                                                                     |", 
            "title": "Update Material"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-material", 
            "text": "Use Case Name  Manage Material    Trigger  The User chooses to delete a Material    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete a Material.                                                                                                                    |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                                       2.  The system deletes the Material from the database.\n\n                     3.  The system notifies the User that a Material has been deleted.                                                                                               |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Material exists. If it does not, an error message \u201cMaterial{materialName} does not exist.\u201d is returned. |\n|  Postcondition      | Material has been deleted from the database.                                                                                                                    |", 
            "title": "Delete Material"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#enable-agent", 
            "text": "Use Case Name  Manage Agent    Trigger  The User chooses to enable an Agent in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to enable the Agent.                                                                                                                     |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                 2.  The system accesses the Hawkengine database.\n\n                     3.  The system sets the Agent to \u201cEnabled\u201d.\n\n                     4.  The system saves the Agent to the database.\n\n                     5.  The system returns the Agent.                                                                                                                                |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                                                 2.  At Basic Flow step 3, the system checks whether the Agent already exists. If it does not, an error message \u201cAgent {agentName} does not exist.\u201d is returned.  |  |  Postcondition      | The Agent has been enabled in the database.                                                                                                                     |", 
            "title": "Enable Agent"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-agent", 
            "text": "Use Case Name  Manage Agent    Trigger  The User chooses to delete an Agent from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Agent.                                                                                                             |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                               2.  The system deletes the Agent from the database.\n\n                     3.  The system notifies the User that the Agent has been deleted.                                                                                        |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Agent exists. If it does not, an error message \u201cAgent {agentName} does not exist.\u201d is returned. |\n|  Postcondition      | The Agent has been deleted from the database.                                                                                                           |", 
            "title": "Delete Agent"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-resource", 
            "text": "Use Case Name  Manage Agent    Trigger  The User chooses to add a new Resource to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add a new Resource.                                                                                                                                                               |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                                             2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Resource to the database.\n\n                     4.  The system returns the newly created Resource.                                                                                                                                                           |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, the system returns an error with an appropriate message.                                                                                                                 2.  At Basic Flow step 3, the system checks whether a Resource with the same name within the same Agent already exists. If it does, an error message \u201cResource {resourceName} already exists.\u201d is returned.  |  |  Postcondition      | The Resource has been added to the database.                                                                                                                                                                |", 
            "title": "Add Resource"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-resource", 
            "text": "Use Case Name  Manage Agent    Trigger  The User chooses to delete a Resource from the database.    Precondition  1.  The User has logged in.                          2.  The User has selected a Resource within the Agent.\n\n                     3.  The User has chosen to delete a Resource.                                                                                                                     |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                                        2.  The system deletes the Resource from the database.\n\n                     3.  The system notifies the User that the Resource has been deleted.                                                                                              |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Resource exists. If it does not, an error message \u201cResource {resourceName} does not exist.\u201d is returned. |\n|  Postcondition      | The Resource has been deleted from the database.                                                                                                                 |    Use Case #008 - Manage Environment Variable \n    ----------------------------------------------   Add Environment Variable              Use Case Name  Manage Environment Variable    Trigger  The User chooses to add a new Environment Variable to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add a new Environment Variable.                                              |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                        2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment Variable to the database.\n\n                     4.  The system returns the newly created Environment Variable.                                          |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned. |\n|  Postcondition      | The Environment Variable has been added to the database.                                               |", 
            "title": "Delete Resource"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-environment-variable", 
            "text": "Use Case Name  Manage Environment Variable    Trigger  The User chooses to update an Environment Variable in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update the Environment Variable.                                                                                                                        |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                                   2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment Variable to the database.\n\n                     4.  The system returns the updated Environment Variable.                                                                                                                           |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                                                                   2.  At Basic Flow step 3, the system checks whether the Environment Variable already exists. If it does not, an error message \u201cEnvironment Variable does not exist.\u201d is returned.  |  |  Postcondition      | The Environment Variable has been updated in the database.                                                                                                                        |", 
            "title": "Update Environment Variable"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-environment-variable", 
            "text": "Use Case Name  Manage Environment Variable    Trigger  The User chooses to delete an Environment Variable from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Environment Variable.                                                                                                                |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                                                 2.  The system deletes the Environment Variable from the database.\n\n                     3.  The system notifies the User that the Environment Variable has been deleted.                                                                                           |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Environment Variable exists. If it does not, an error message \u201cEnvironment Variable does not exist.\u201d is returned. |\n|  Postcondition      | The Environment Variable has been deleted from the database.                                                                                                              |    Use Case #009 - Manage Environment \n    -------------------------------------", 
            "title": "Delete Environment Variable"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#add-environment", 
            "text": "Use Case Name  Manage Environment    Trigger  The User chooses to add a new Environment to the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to add a new Environment.                                                       |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                        2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment to the database.\n\n                     4.  The system returns the newly created Environment.                                                   |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned. |\n|  Postcondition      | The Environment has been added to the database.                                                        |", 
            "title": "Add Environment"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#update-environment", 
            "text": "Use Case Name  Manage Environment    Trigger  The User chooses to update an Environment in the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to update the Environment.                                                                                                                        |  |  Basic Flow         | 1.  The system validates the data entered by the User.                                                                                                                                          2.  The system accesses the Hawkengine database.\n\n                     3.  The system saves the Environment to the database.\n\n                     4.  The system returns the updated Environment.                                                                                                                           |  |  Alternative Flows  | 1.  At Basic Flow step 1, if the entered data is invalid, an error message \u201cInvalid data\u201d is returned.                                                                                          2.  At Basic Flow step 3, the system checks whether the Environment Variable already exists. If it does not, an error message \u201cEnvironment does not exist.\u201d is returned.  |  |  Postcondition      | The Environment has been updated in the database.                                                                                                                        |", 
            "title": "Update Environment"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#delete-environment", 
            "text": "Use Case Name  Manage Environment    Trigger  The User chooses to delete an Environment from the database.    Precondition  1.  The User has logged in.                          2.  The User has chosen to delete the Environment.                                                                                                       |  |  Basic Flow         | 1.  The system accesses the Hawkengine database.                                                                                                                               2.  The system deletes the Environment from the database.\n\n                     3.  The system notifies the User that the Environment has been deleted.                                                                                  |  |  Alternative Flows  | 1.  At Basic Flow step 2, the system checks whether the Environment exists. If it does not, an error message \u201cEnvironment does not exist.\u201d is returned. |\n|  Postcondition      | The Environment has been deleted from the database.                                                                                                     |", 
            "title": "Delete Environment"
        }, 
        {
            "location": "/contribute/technical-documentation/srs/#other-requirements", 
            "text": "The server should support 2 types of databases: MongoDB and Redis. Redis is in memory store that can be used for small scale projects that would enable easy setup and run scenarios. Its main limitation is the memory of the machine it runs on. MongoDb is a fully fledged document based database engine that will be used in enterprise deployments.  Appendix A: Glossary  Appendix C: To Be Determined List  Collect a numbered list of the TBD (to be determined) references that remain in the SRS so they can be tracked to closure.", 
            "title": "Other Requirements"
        }, 
        {
            "location": "/contribute/technical-documentation/sdd/", 
            "text": "", 
            "title": "Software Design Document"
        }, 
        {
            "location": "/contribute/technical-documentation/rest-api/", 
            "text": "", 
            "title": "Hawk API"
        }, 
        {
            "location": "/contribute/development-process/", 
            "text": "Overview\n\n\nLabels\n\n\nRequest a Feature\n\n\nReport a bug", 
            "title": "Development Process"
        }, 
        {
            "location": "/contribute/development-process/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/contribute/development-process/#labels", 
            "text": "", 
            "title": "Labels"
        }, 
        {
            "location": "/contribute/development-process/#request-a-feature", 
            "text": "", 
            "title": "Request a Feature"
        }, 
        {
            "location": "/contribute/development-process/#report-a-bug", 
            "text": "", 
            "title": "Report a bug"
        }, 
        {
            "location": "/contribute/discussions/", 
            "text": "", 
            "title": "Discussions"
        }, 
        {
            "location": "/roadmap/", 
            "text": "", 
            "title": "Roadmap"
        }, 
        {
            "location": "/download/", 
            "text": "", 
            "title": "Download"
        }
    ]
}